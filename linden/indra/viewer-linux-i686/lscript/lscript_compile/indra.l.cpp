#line 2 "/home/gareth/slbrowser/linden/indra/viewer-linux-i686/lscript/lscript_compile/indra.l.cpp"
/* A lexical scanner generated by flex*/

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* Some routines like yy_flex_realloc() are emitted as static but are
   not called by all lexers. This generates warnings in some compilers,
   notably GCC. Arrange to suppress these. */
#ifdef __GNUC__
#define YY_MAY_BE_UNUSED __attribute__((unused))
#else
#define YY_MAY_BE_UNUSED
#endif

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) YY_MAY_BE_UNUSED;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 528
#define YY_END_OF_BUFFER 529
static yyconst short int yy_accept[3625] =
    {   0,
        0,    0,  529,  527,  526,  526,  521,  527,  506,  517,
      500,  501,  504,  503,  498,  502,   54,  505,   56,   56,
      508,  495,  510,  499,  509,  507,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  512,  511,  519,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  496,  518,  497,
      520,  514,    0,  487,    0,  494,  522,  492,  488,  490,
      489,  491,  485,    1,  493,  486,   56,    0,    0,  524,
      516,  513,  515,  525,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
        0,  483,  483,  483,  483,  483,  483,  483,  483,  174,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,   18,  483,  483,  483,  483,  483,  483,   15,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  523,
        0,  485,  485,    0,  486,    0,  484,   55,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      173,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,   17,  483,
      483,  483,    5,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,    0,  485,    0,  485,    0,
      486,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,   97,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,   57,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,   16,  483,
      483,  483,  483,  483,   13,  483,  483,    9,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,    0,  485,  483,
      109,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,   58,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  102,  483,  483,

      179,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,   42,   12,    3,  483,
      483,  483,  483,  483,   41,  483,  483,  483,  483,  483,
       36,  483,  483,  483,  483,  483,  483,   11,  483,   31,
       23,  483,   19,  110,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      101,  483,  100,  483,  483,  483,  175,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,   45,  483,
      483,  483,  483,  483,  483,  483,  483,  483,   32,  483,
      483,  483,  483,   50,  483,  483,   14,  483,  483,   33,
      483,    4,  483,    6,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,   96,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  111,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,   98,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,   44,  483,   35,  483,   10,  483,
        2,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  105,  483,
      483,  483,  483,  483,  483,  483,  172,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  424,  483,  399,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  112,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  168,  483,

      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
        8,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  103,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  233,  232,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  483,  104,  108,  483,
      390,  483,  483,  394,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  397,  483,  398,  483,   99,  176,  483,  483,  483,
      483,  483,  338,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  331,  483,  483,  483,  322,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,   37,   26,  483,  483,  483,  483,  483,

      483,   34,  483,  483,  483,  483,  483,  483,  483,  483,
       24,  483,  483,  483,   75,   80,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      119,  483,  483,  483,  483,  483,  483,  483,  177,  483,
      483,  483,  483,  483,  483,  222,  224,  483,  226,  223,

      483,  483,  483,  483,  483,  483,  483,  392,  391,  483,
      483,  483,  483,  483,  159,  160,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  334,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  178,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  166,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
       46,  483,  483,  483,   48,  483,  483,  483,   51,    7,

      483,  483,  483,   21,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  192,  483,  483,  195,
      185,  483,  196,  198,  483,  483,  208,  483,  483,  213,
      483,  483,  483,  483,  200,  483,  197,  199,  483,  483,
      205,  483,  483,  212,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  113,  483,  483,  483,
      483,  483,  231,  483,  234,  483,  483,  483,  483,  483,
      483,  451,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  227,  483,  225,  483,  483,

      483,  483,  483,  483,  483,  483,  483,  158,  483,  157,
      483,  483,  483,  483,  483,  483,  483,  483,  425,  483,
      396,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  337,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  469,  483,  483,  483,  483,
      483,  483,  483,  483,  167,  169,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  182,  483,  483,  483,
      483,  483,  483,  483,  483,  483,   52,  483,   20,   22,
      483,  483,  483,   69,   77,  483,  483,  483,  483,   78,
      483,  211,  184,  483,  483,  483,  190,  188,  204,  210,
      483,  203,  209,  194,  483,  191,  189,  202,  207,  483,
      201,  206,  483,  483,  483,   93,   82,  483,  483,  483,
      483,  151,  483,  483,  483,  483,  483,  483,  483,  114,
      120,  483,  115,  483,  483,  483,  238,  235,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  163,  162,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  328,  324,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  333,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      165,  171,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,   49,   47,
      483,  483,  483,  483,  483,  483,  483,  483,  483,   73,
       76,  483,  483,  483,  483,  193,  483,   91,  483,  483,
      483,  483,  483,  147,  483,  153,  483,  149,  148,  483,
      483,  483,  483,  483,  116,  483,  483,  483,  483,  180,
      483,  483,  452,  483,  144,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  414,  483,  483,  415,  483,  483,  483,  419,

      393,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  395,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  325,
      483,  483,  483,  483,  483,  323,  483,  330,  332,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  339,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  478,  483,  480,  483,
      483,  170,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  183,   39,   27,  483,   53,  483,  483,   38,  483,
      483,  483,  483,  483,  483,   71,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  154,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  145,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  416,  483,  483,  483,  483,  483,
      164,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  367,  483,  483,  483,  483,  483,
      365,  483,  483,  483,  363,  483,  483,  483,  483,  483,
      371,  483,  366,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  360,  483,  483,  483,  483,  483,
      483,  483,  345,  483,  483,  483,  344,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  272,  483,  483,
      483,  483,  483,  275,  483,  483,  483,  483,  181,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
       63,   59,  483,  483,   64,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,   29,  483,
      483,  483,  483,   79,   72,   74,  483,  483,  483,  483,
      483,  483,   86,  483,  483,  483,  483,   92,  483,  483,
      483,  150,  483,  483,  483,  483,  483,  483,  483,  121,
      483,  483,  483,  237,  236,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  135,  483,  483,  483,
      483,  483,  106,  483,  483,  483,  423,  483,  483,  483,
      161,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  375,  483,  483,  483,  483,  373,
      483,  483,  335,  483,  372,  483,  483,  380,  483,  336,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  362,  483,  359,  483,  483,
      483,  483,  341,  483,  483,  343,  483,  483,  483,  483,
      483,  244,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
       60,   61,   62,  483,  483,  479,  481,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  483,  483,   25,  483,
      483,  483,   81,  483,  483,  483,  483,  483,  483,  186,
      187,  483,   85,  483,  483,  483,  483,  483,  483,  155,
      473,  483,  483,  474,  483,  472,  483,  483,  117,  483,
      483,  483,  455,  483,  483,  483,  483,  483,  483,  136,
      137,  483,  230,  483,  228,  483,  483,  417,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  123,  483,  483,  483,  483,  483,  368,
      364,  483,  483,  374,  483,  376,  378,  483,  483,  348,

      483,  349,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  326,  483,  483,  483,  327,  483,  483,  483,  346,
      342,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  261,  483,
      483,  262,  483,  273,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  467,  468,  483,
      483,  483,  297,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  284,  483,
      483,  483,  483,  483,  483,  483,   70,  220,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  146,

      470,  475,  476,  483,  483,  118,  483,  483,  483,  483,
      483,  143,  483,  483,  134,  229,  107,  483,  483,  418,
      483,  483,  483,  483,  483,  483,  461,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  240,  127,  483,  483,  483,  483,  483,  483,  483,
      369,  483,  483,  379,  329,  347,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  361,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  251,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  243,  483,   65,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  285,
      282,  283,  483,  483,  483,   40,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  471,  122,  483,  483,  483,  141,  139,  138,  140,
      483,  483,  483,  483,  458,  459,  457,  483,  456,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  370,
      483,  350,  483,  483,  483,  483,  483,  483,  483,  354,

      483,  483,  483,  483,  483,  483,  483,  483,  382,  340,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  266,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,   66,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,   30,  483,  483,  483,  483,  218,  214,  483,
      217,  483,  483,  483,   95,   83,  483,   84,  483,  483,
      483,  483,  453,  454,  142,  483,  421,  483,  483,  483,

      466,  463,  483,  462,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  377,
      355,  353,  358,  352,  483,  483,  351,  483,  483,  483,
      483,  483,  483,  483,  381,  483,  483,  249,  248,  250,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  252,
      483,  483,  483,  267,  483,  263,  483,  264,  483,  483,
      483,  274,  483,  483,  483,  483,  483,  483,  445,  241,
      242,   68,  483,  482,  483,  483,  483,  483,  309,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  215,  483,  483,  483,  483,  483,  152,  483,  483,
      483,  483,  483,  465,  464,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  239,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      357,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  265,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  294,  483,  483,  483,  483,  483,  483,  287,  483,
       28,   43,  483,  483,  216,  483,   88,  483,  483,  483,
      483,  483,  420,  156,  460,  483,  483,  483,  426,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  356,  483,
      483,  483,  387,  483,  483,  483,  255,  483,  483,  483,
      483,  483,  246,  245,  247,  483,  483,  483,  269,  483,
      276,  483,  277,  483,  483,  483,  448,  483,  483,  483,
      443,  483,   67,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  286,  483,  219,  483,  483,   90,
       94,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  385,  483,  384,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  279,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  311,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  221,
       87,  483,  477,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      129,  483,  483,  483,  483,  483,  132,  483,  389,  388,
      483,  383,  259,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  296,  483,  483,  483,
      483,  483,  483,  288,  483,  483,  422,  483,  483,  431,
      483,  483,  483,  483,  483,  483,  483,  483,  436,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  405,  130,  483,  483,  483,  483,  124,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  271,  270,
      483,  278,  442,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  295,  483,  483,  483,  483,
      483,  483,  483,   89,  483,  483,  483,  483,  483,  428,
      483,  483,  483,  483,  483,  483,  483,  483,  412,  403,
      483,  402,  411,  400,  483,  406,  410,  483,  483,  133,
      483,  125,  483,  386,  256,  483,  483,  483,  483,  258,
      268,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  310,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  429,  483,  483,  483,
      483,  483,  483,  407,  483,  483,  401,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  308,  483,  483,
      483,  317,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      430,  483,  483,  483,  435,  483,  483,  483,  483,  408,
      483,  483,  483,  483,  253,  254,  483,  280,  483,  444,

      483,  447,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  318,  483,  320,  483,  483,  483,  483,  483,
      483,  483,  293,  483,  483,  483,  483,  483,  483,  483,
      438,  483,  434,  483,  483,  483,  404,  483,  128,  126,
      483,  260,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  313,  319,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  413,  131,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  321,  483,  483,
      314,  312,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  437,  483,  257,  483,
      483,  446,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  291,  300,  483,  483,  483,
      483,  483,  483,  427,  439,  409,  483,  483,  450,  483,
      483,  483,  483,  292,  304,  483,  315,  483,  483,  483,
      483,  483,  483,  483,  483,  432,  483,  483,  483,  483,
      483,  483,  483,  316,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  281,  449,  483,  483,  483,  483,  483,
      483,  289,  483,  483,  483,  441,  483,  483,  483,  483,
      290,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  299,  483,  483,  483,  483,  440,  483,
      303,  483,  298,  301,  483,  483,  483,  302,  305,  483,
      307,  433,  306,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    7,    1,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,    1,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,   55,   56,    1,   57,   58,   59,   60,

       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
       81,   82,   83,   84,   85,   86,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[87] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    2,    2,    2,    1,
        1,    1,    1,    1,    1,    2,    2,    2,    2,    2,
        2,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    1,    1,    1,    1,    3,    2,    2,    2,    2,
        2,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[3628] =
    {   0,
        0,    0, 3740, 3741, 3741, 3741, 3716,   82, 3715, 3730,
     3741, 3741, 3713,   77, 3741,   76,   74,   79,   87,   93,
     3741, 3741,   73, 3712,   74, 3741,   87,    0,   88,   90,
     3694, 3707, 3687, 3692,  103, 3704, 3683, 3701,  112,  101,
      102,  109, 3697, 3696, 3741, 3741, 3741, 3649,   89,  104,
       94,   98, 3648,  106, 3646, 3661,  113, 3650, 3649,   64,
     3645, 3641,  103,   57,   80, 3656, 3652, 3741, 3631, 3741,
     3741, 3741,  144, 3741, 3711, 3741, 3741, 3741, 3741, 3741,
     3741, 3741,  165, 3741, 3741,  169,  175,  190,    0, 3741,
     3741, 3741, 3741, 3741,    0, 3668, 3682, 3674, 3676, 3664,

     3670, 3681, 3672, 3666, 3659,  183, 3672, 3665, 3656, 3653,
      145, 3660,  172, 3658, 3653, 3659, 3660,  169, 3651,  134,
     3659, 3642, 3664, 3661,  182, 3644,  178, 3648, 3644,  191,
     3637, 3639, 3644, 3642, 3649, 3638,  146, 3623,  109, 3603,
     3616,    0, 3602, 3619, 3614, 3603, 3599, 3596,    0, 3595,
     3601, 3588, 3598,  148,  154,  169, 3601, 3610, 3600, 3607,
      159, 3587, 3592, 3591,  176, 3591, 3582, 3599, 3592, 3741,
      230, 3741,  221,  242, 3741,  246,  250,    0, 3622, 3616,
     3598, 3615, 3626, 3621, 3611, 3621, 3603, 3621, 3600, 3589,
        0, 3600, 3602, 3612, 3612, 3604, 3594, 3597, 3601, 3599,

     3605, 3606, 3589,  216, 3594, 3599, 3603, 3591, 3584, 3590,
     3570, 3591, 3584, 3593, 3596, 3584, 3586, 3579, 3573, 3572,
     3582, 3570, 3584, 3557, 3582, 3577, 3570,  168, 3552, 3538,
     3539, 3530, 3548, 3547, 3542, 3537, 3531, 3543,    0, 3527,
     3537, 3525,    0, 3536, 3528, 3518, 3532, 3527, 3516, 3534,
     3528, 3514, 3517, 3510, 3514, 3507, 3526, 3526, 3506, 3504,
     3514, 3517, 3518, 3500, 3507,  257,  261,  277, 3741,  268,
      281, 3527, 3528, 3528, 3515, 3542, 3526, 3536, 3531, 3523,
     3509, 3532, 3518, 3532, 3505, 3521, 3503, 3502, 3501,    0,
     3500, 3499, 3526, 3523, 3518, 3521,  272,  247, 3494, 3499,

     3492, 3491, 3512, 3500, 3504, 3498, 3499, 3496, 3510, 3498,
     3493, 3519, 3490, 3496, 3488,    0, 3492, 3476, 3503, 3474,
     3458, 3471, 3468, 3463, 3460, 3450, 3448, 3445,    0, 3453,
     3444, 3443, 3462, 3454,    0, 3460, 3459, 3453, 3432, 3442,
     3450, 3453, 3450, 3447, 3431, 3445, 3429, 3430, 3427, 3426,
     3430, 3439, 3429, 3424, 3433, 3425, 3434,  290,  297, 3464,
     3437, 3458, 3451, 3457, 3463, 3458, 3431, 3446,  290, 3429,
     3444,    0,  264, 3438,  281,  295, 3438,  305, 3445, 3435,
     3442, 3431, 3438, 3446, 3441, 3430,  320, 3432, 3416,  323,
      308, 3443, 3430, 3430, 3438, 3423, 3436,    0, 3420, 3431,

        0, 3419, 3430, 3418, 3426,  326, 3422,  279, 3382, 3383,
     3392, 3394, 3379, 3382, 3391, 3383,    0,    0,    0, 3376,
     3388, 3389, 3378, 3376,    0, 3382, 3374, 3367, 3366, 3359,
        0, 3366, 3378, 3368, 3372, 3371, 3361, 3378, 3370,    0,
     3376, 3357,    0,    0,  348, 3401, 3390, 3372, 3371, 3397,
     3399, 3387, 3383, 3396, 3382, 3394, 3393, 3384, 3389, 3360,
     3375,  347, 3384, 3373,  354, 3382, 3371,  357, 3372, 3372,
     3368, 3377, 3373, 3360, 3378, 3356, 3359, 3371, 3352, 3369,
     3342, 3341, 3366, 3350, 3363, 3364, 3348, 3354, 3350, 3349,
     3345, 3347, 3341, 3339,  230,  290, 3347, 3343, 3356,  338,

     3341,  357,  359, 3354, 3336, 3322, 3321, 3320, 3319, 3344,
        0, 3343,    0, 3316, 3315, 3340,    0, 3332, 3329, 3337,
     3326, 3320, 3334, 3333, 3322, 3331, 3304, 3296,    0, 3298,
     3292, 3288, 3281, 3278, 3292, 3278, 3280, 3289,    0, 3293,
     3273, 3291, 3290,    0, 3275, 3288,    0, 3272, 3273,    0,
     3280,    0,  196,    0,  358, 3294, 3296, 3301, 3298, 3296,
     3296,  276, 3284, 3307, 3302,    0,  374,  392, 3275, 3302,
     3273, 3285, 3289, 3289, 3275, 3279, 3285, 3289, 3278, 3291,
     3274, 3280, 3274, 3273, 3272, 3267, 3265, 3283, 3277, 3276,
     3262,  374, 3271, 3267, 3261, 3271, 3278, 3259, 3272, 3261,

     3251, 3260, 3248,  396,  403,    0, 3241, 3270, 3265, 3260,
     3256, 3251,  369, 3265, 3251, 3241, 3250, 3243, 3249, 3255,
     3247, 3243, 3245, 3236,  379,  319, 3235, 3233, 3244, 3226,
      359, 3235, 3232, 3246, 3245, 3243, 3240, 3241,    0, 3240,
      417, 3223, 3211, 3226,  375, 3215, 3219, 3220, 3234, 3205,
     3215, 3231, 3182, 3196,    0, 3185,    0, 3177,    0, 3179,
        0, 3185, 3177,  365, 3180,  373, 3176, 3184, 3188, 3177,
     3185,  368, 3175, 3168, 3195, 3197,   87,  127,  249,  291,
      286,  301,  316,  356,  359,  369,  390,  386,  424,  418,
      422,  426,  413,  415,  432,  443,  436,  435,  432,  429,

      437,  457,  430,  461,  439,  449,  447,  448,  452,  437,
      469,  470,  453,  472,  476,  474,  459,  478,  481,  482,
      479,  470,  471,  486,  480,  478,  463,  475,    0,  477,
      477,  493,  481,  479,  481,  497,    0,  485,  499,  487,
      505,  484,  493,  494,  496,  506,  497,  508,  502,  510,
      507,  496,    0,  503,    0,  494,  511,  516,  508,  516,
      509,  509,  506,  512,  504,  517,  507,  526,  527,  519,
      515,  521,  527,  536,  526,  525,  535,  525,  535,  538,
      524,  514,  538,  542,  536,  548,    0,  538,  550,  543,
      545,  549,  555,  539,  556,  558,  556,  561,    0,  562,

      556,  546,  569,  566,  548,  541,  523,  533,  543,  533,
      539,  533,  539,  534,  537,  542,  558,  556,  547,  562,
        0,  564,  545,  557,  563,  567,  599,  600,  577,  578,
      583,  596,  605,  588,  593,  600,  590,  602,  601,    0,
      610,  602,  610,  615,  613,  617,  605,  620,  621,  618,
      616,  624,  605,  608,  616,  629,  616,  631,  633,  630,
      629,  637,  619,  633,  624,  641,  626,  628,  636,  635,
      637,  643,  630,  650,  653,  652,  649,  658,  645,  639,
      661,  652,  656,  651,    0,    0,  654,  655,  656,  656,
      659,  672,  646,  663,  659,  674,  650,  677,  671,  666,

      664,  681,  682,  670,  677,  670,  688,    0,    0,  661,
        0,  668,  678,    0,  677,  691,  678,  683,  686,  686,
      682,  682,  693,  693,  685,  687,  707,  705,  696,  699,
      698,    0,  707,    0,  695,    0,    0,  684,  685,  699,
      709,  717,    0,  689,  703,  702,  714,  704,  705,  706,
      711,  703,    0,  698,  725,  710,  701,  702,  733,  735,
      730,  737,  719,  725,  722,  738,  743,  725,  727,  736,
      742,  740,  749,  750,  744,  739,  738,  752,  748,  741,
      748,  748,  750,  764,  754,  752,  760,  765,  746,  767,
      753,  759,  726,    0,  745,  728,  732,  739,  748,  746,

      750,    0,  732,  735,  729,  742,  737,  742,  741,  740,
        0,  743,  768,  791,    0,    0,  792,  782,  788,  793,
      797,  784,  792,  788,  794,  793,  793,  787,  793,  804,
      778,  792,  806,  797,  799,  798,  797,  811,  814,  803,
      801,  815,  801,  817,  801,  806,  820,  811,  813,  812,
      811,  825,  828,  817,  815,  829,  826,  827,  817,  817,
      836,  831,  829,  830,  821,  830,  831,  839,  846,  847,
      837,  835,  848,  829,  849,  833,  849,  825,  850,  838,
        0,  854,  854,  855,  848,  863,  845,  852,    0,  854,
      864,  844,  845,  870,  844,    0,    0,  863,    0,    0,

      858,  848,  872,  873,  863,  879,  872,    0,    0,  887,
      888,  873,  890,  891,    0,    0,  885,  885,  887,  901,
      896,  895,  899,  886,  876,  883,  903,  908,  894,    0,
      912,  898,  914,  910,  906,  920,  893,  916,  917,  909,
      899,  917,  921,  918,  935,  937,  938,  919,  930,  944,
      945,  947,  958,  935,    0,  954,  961,  961,  945,  936,
      954,  950,  949,  970,  968,  960,  973,  969,  972,  952,
      977,    0,  974,  971,  972,  975,  965,  977,  971,  971,
      986,  966,  975,  984,  975,  974,  984,  976,  957,  960,
        0,  952,  948,  961,    0,  951,  970,  964,    0,    0,

      971,  968,  949,    0,  955,  988, 1000, 1001, 1004,  994,
     1001, 1004,  995, 1002, 1010, 1004,    0,  994, 1000,    0,
        0, 1019,    0,    0, 1003, 1020,    0, 1012, 1019,    0,
     1006, 1015, 1022, 1022,    0, 1022,    0,    0, 1012, 1029,
        0, 1021, 1028,    0, 1015, 1024, 1031, 1018, 1027, 1041,
     1024, 1036, 1025, 1031, 1032, 1043, 1038, 1045, 1042, 1040,
     1037, 1049, 1035, 1042, 1046, 1044,    0, 1039, 1040, 1049,
     1054, 1032,    0, 1049,    0, 1046, 1046, 1066, 1063, 1068,
     1052,    0, 1055, 1041, 1061, 1059, 1064, 1072, 1077, 1064,
     1078, 1078, 1077, 1081, 1053,    0, 1083,    0, 1077, 1079,

     1083, 1089, 1068, 1090, 1075, 1078, 1077,    0, 1083,    0,
     1082, 1086, 1099, 1083, 1095, 1074, 1105, 1092,    0, 1107,
        0, 1104, 1111, 1105, 1113, 1097, 1115, 1102, 1110, 1112,
     1119, 1118, 1116, 1123, 1124, 1130, 1119, 1119, 1137, 1126,
     1121, 1129, 1127, 1128, 1113, 1137, 1132, 1116, 1143, 1137,
     1128, 1136, 1146, 1153, 1142, 1143, 1146, 1149, 1148, 1164,
     1146, 1166, 1159, 1167, 1164, 1154, 1159, 1150, 1165, 1171,
     1157, 1158, 1161, 1156, 1167, 1151, 1152, 1173, 1154, 1185,
     1167, 1179, 1171, 1170, 1189, 1161, 1179, 1193, 1186, 1173,
     1183, 1180, 1195, 1185,    0,    0, 1180, 1191, 1178, 1197,

     1200, 1201, 1202, 1203, 1189, 1195,    0, 1175, 1167, 1162,
     1164, 1175, 1180, 1166, 1167, 1183,    0, 1171,    0,    0,
     1190, 1209, 1214,    0,    0, 1209, 1220, 1221, 1220,    0,
     1221,    0,    0, 1214, 1225, 1216,    0,    0,    0,    0,
     1220,    0,    0,    0, 1214,    0,    0,    0,    0, 1222,
        0,    0, 1230, 1232, 1223, 1207,    0, 1230, 1217, 1223,
     1228,    0, 1225, 1229, 1240, 1241, 1231, 1227, 1218,    0,
        0, 1230,    0, 1249, 1232, 1241,    0,    0, 1245, 1235,
     1244, 1233, 1237, 1255, 1258, 1250, 1254, 1260, 1250, 1247,
     1253, 1254, 1259, 1252, 1250, 1248, 1255, 1273, 1258, 1265,

     1273, 1264, 1256, 1280, 1268, 1270, 1271, 1282, 1274, 1283,
     1274,    0,    0, 1267, 1282, 1261, 1281, 1293, 1264, 1265,
     1277, 1291, 1293, 1295, 1300, 1284, 1285, 1289, 1298, 1303,
     1295, 1292, 1293, 1312, 1297, 1302, 1308, 1315, 1305, 1318,
     1310, 1322, 1309, 1324, 1322, 1321, 1311, 1324, 1310, 1323,
     1321,    0,    0, 1325, 1321, 1322, 1331, 1329, 1324, 1335,
     1326, 1311, 1339,    0, 1320, 1333, 1337, 1333, 1327, 1341,
     1332, 1350, 1332, 1345, 1352, 1356, 1346, 1339, 1336, 1360,
     1344, 1349, 1359, 1353, 1347, 1362, 1337, 1338, 1363, 1366,
     1352, 1366, 1354, 1370, 1375, 1377, 1347, 1363, 1363, 1369,

     1382, 1372, 1382, 1373, 1381, 1379, 1370, 1391, 1381, 1378,
        0,    0, 1384, 1387, 1391, 1401, 1372, 1386, 1404, 1388,
     1376, 1399, 1395, 1359, 1376, 1380, 1377, 1368,    0,    0,
     1383, 1365, 1373, 1400, 1414, 1406, 1406, 1419, 1419,    0,
        0, 1404, 1411, 1410, 1423,    0, 1424,    0, 1415, 1427,
     1419, 1417, 1428,    0, 1415,    0, 1422,    0,    0, 1422,
     1420, 1438, 1426, 1421,    0, 1438, 1435, 1431, 1425,    0,
     1435, 1434,    0, 1444,    0, 1437, 1426, 1435, 1436, 1455,
     1455, 1456, 1457, 1454, 1450, 1445, 1445, 1449, 1447, 1465,
     1452, 1458,    0, 1458, 1464,    0, 1443, 1468, 1445, 1446,

        0, 1460, 1465, 1460, 1474, 1463, 1471, 1469, 1480, 1467,
     1484, 1475, 1468, 1490, 1478, 1493, 1485, 1488, 1499,    0,
     1490, 1500, 1500, 1501, 1502, 1495, 1498, 1488, 1504, 1507,
     1499, 1505, 1501, 1513, 1497, 1513, 1497, 1516, 1517,    0,
     1514, 1520, 1523, 1524, 1525, 1496, 1521,    0,    0, 1517,
     1505, 1524, 1509, 1529, 1520, 1517, 1531, 1525,    0, 1529,
     1520, 1533, 1529, 1537, 1522, 1539, 1531, 1527, 1516, 1541,
     1537, 1545, 1520, 1534, 1546, 1550, 1543, 1551, 1537, 1540,
     1558, 1542, 1560, 1544, 1558, 1559, 1544, 1554, 1555, 1556,
     1560, 1561, 1566, 1571, 1565, 1569, 1568, 1568, 1546, 1565,

     1560, 1549, 1550, 1558, 1578, 1583,    0, 1573,    0, 1571,
     1571,    0, 1587, 1575, 1576, 1588, 1561, 1575, 1589, 1596,
     1592,    0,    0,    0, 1554,    0, 1559, 1556,    0, 1566,
     1586, 1594, 1602, 1600, 1592,    0, 1593, 1594, 1585, 1612,
     1613, 1614, 1615, 1620, 1616, 1615, 1610, 1621, 1611,    0,
     1609, 1623, 1608, 1615, 1615, 1631, 1624, 1619, 1622, 1617,
     1632, 1632, 1633, 1622, 1637, 1641, 1627, 1645, 1631, 1640,
     1628, 1637,    0, 1648, 1649, 1637, 1650, 1634, 1637, 1636,
     1639, 1641, 1641, 1656,    0, 1661, 1660, 1659, 1661, 1647,
        0, 1636, 1643, 1651, 1650, 1666, 1667, 1643, 1663, 1673,

     1658, 1673, 1664, 1666, 1662, 1682, 1670, 1665, 1677, 1682,
     1687, 1684, 1687, 1684,    0, 1673, 1682, 1686, 1684, 1678,
        0, 1678, 1693, 1694,    0, 1675, 1687, 1697, 1700, 1695,
        0, 1700,    0, 1691, 1687, 1696, 1688, 1692, 1697, 1706,
     1706, 1714, 1700, 1709,    0, 1711, 1716, 1718, 1720, 1726,
     1714, 1717,    0, 1715, 1714, 1714,    0, 1731, 1716, 1735,
     1718, 1724, 1722, 1740, 1722, 1738, 1713,    0, 1714, 1715,
     1746, 1741, 1744,    0, 1749, 1733, 1732, 1735,    0, 1743,
     1741, 1738, 1734, 1740, 1746, 1760, 1746, 1746, 1764, 1761,
        0,    0, 1766, 1744,    0, 1770, 1763, 1753, 1770, 1774,

     1758, 1770, 1775, 1778, 1765, 1772, 1767, 1768, 1779, 1754,
     1772, 1779, 1788, 1789, 1776, 1780, 1792, 1743, 1764, 1758,
     1747, 1784, 1780,    0,    0,    0, 1786, 1797, 1801, 1787,
     1788, 1788,    0, 1801, 1806, 1804, 1793, 1781, 1783, 1797,
     1796,    0, 1792, 1804, 1815, 1796, 1821, 1803, 1803,    0,
     1805, 1806, 1819,    0,    0, 1814, 1828, 1810, 1811, 1831,
     1824, 1816, 1834, 1835, 1817, 1818,    0, 1821, 1832, 1822,
     1834, 1838,    0, 1824, 1831, 1831,    0, 1842, 1831, 1845,
        0, 1835, 1843, 1838, 1841, 1841, 1835, 1855, 1842, 1857,
     1840, 1830, 1850, 1833, 1860, 1863, 1860, 1850, 1851, 1871,

     1857, 1843, 1864, 1869,    0, 1858, 1858, 1874, 1875,    0,
     1869, 1862,    0, 1876,    0, 1869, 1870,    0, 1863,    0,
     1882, 1876, 1884, 1883, 1879, 1880, 1884, 1889, 1883, 1875,
     1877, 1883, 1879, 1893, 1896,    0, 1881,    0, 1877, 1903,
     1891, 1902,    0, 1887, 1903,    0, 1904, 1901, 1899, 1897,
     1910,    0, 1891, 1899, 1909, 1886, 1898, 1906, 1918, 1906,
     1907, 1921, 1915, 1914, 1915, 1899, 1926, 1917, 1930, 1933,
     1930, 1916, 1933, 1924, 1927, 1919, 1940, 1938, 1939, 1924,
        0,    0,    0, 1941, 1934,    0,    0, 1929, 1917, 1918,
     1925, 1938, 1930, 1940, 1933, 1924, 1950, 1952, 1949, 1955,

     1957, 1944, 1951, 1963, 1947, 1952, 1962, 1957,    0, 1934,
     1935, 1922,    0, 1954, 1961, 1957, 1971, 1972, 1969,    0,
        0, 1960,    0, 1969, 1962, 1977, 1971, 1981, 1961,    0,
        0, 1982, 1974,    0, 1964,    0, 1987, 1977,    0, 1973,
     1987, 1975,    0, 1987, 1979, 1984, 1994, 1982, 1983,    0,
        0, 1997,    0, 1995,    0, 1990, 1987,    0, 1985, 1985,
     1987, 2004, 1989, 2006, 2007, 2008, 1998, 2014, 1998, 2012,
     2000, 2018, 1997, 1998, 2010, 2005, 2023, 2013, 2021, 2024,
     2021, 2025, 2016,    0, 2013, 2002, 2031, 2005, 2032,    0,
        0, 2020, 2019,    0, 2031,    0,    0, 2027, 2023,    0,

     2023,    0, 2032, 2040, 2045, 2040, 2028, 2048, 2048, 2036,
     2037,    0, 2022, 2023, 2042,    0, 2035, 2056, 2053,    0,
        0, 2028, 2038, 2045, 2050, 2062, 2033, 2034, 2061, 2066,
     2037, 2069, 2066, 2058, 2072, 2073, 2059, 2069,    0, 2046,
     2071, 2048, 2069,    0, 2058, 2071, 2081, 2080, 2068, 2085,
     2074, 2064, 2085, 2089, 2077, 2086, 2063,    0,    0, 2090,
     2092, 2094,    0, 2092, 2095, 2092, 2083, 2100, 2097, 2099,
     2096, 2105, 2093, 2097, 2108, 2099, 2104, 2097,    0, 2113,
     2115, 2089, 2076, 2071, 2072, 2084,    0, 2094, 2095, 2113,
     2122, 2122, 2099, 2126, 2127, 2114, 2133, 2127, 2118,    0,

        0, 2106,    0, 2130, 2125,    0, 2120, 2136, 2127, 2123,
     2137,    0, 2134, 2142,    0,    0,    0, 2138, 2135,    0,
     2149, 2131, 2136, 2135, 2136, 2152,    0, 2144, 2152, 2139,
     2144, 2147, 2147, 2131, 2132, 2155, 2162, 2165, 2166, 2167,
     2160,    0,    0, 2139, 2159, 2167, 2170, 2159, 2172, 2158,
        0, 2172, 2166,    0,    0,    0, 2174, 2161, 2162, 2174,
     2182, 2165, 2183, 2172, 2183, 2179, 2186,    0, 2178, 2173,
     2175, 2181, 2190, 2188, 2182, 2186, 2181, 2198,    0, 2192,
     2192, 2205, 2197, 2191, 2204, 2208, 2196, 2211, 2211, 2206,
     2206, 2208, 2220, 2217, 2192, 2195, 2215, 2197, 2220, 2215,

     2227,    0, 2214,    0, 2211, 2230, 2231, 2223, 2233, 2221,
     2225, 2235, 2233, 2234, 2226, 2227, 2226, 2242, 2243, 2237,
     2241, 2244, 2247, 2247, 2245, 2235, 2225, 2245, 2243,    0,
        0,    0, 2258, 2225, 2229,    0, 2216, 2251, 2272, 2246,
     2247, 2260, 2269, 2267, 2252, 2265, 2267, 2272, 2258, 2262,
     2265,    0,    0, 2271, 2276, 2268,    0,    0,    0,    0,
     2280, 2264, 2267, 2285,    0,    0,    0, 2267,    0, 2287,
     2286, 2269, 2286, 2287, 2292, 2275, 2294, 2297, 2287, 2288,
     2289, 2293, 2297, 2275, 2277, 2295, 2300, 2314, 2285,    0,
     2312,    0, 2310, 2300, 2300, 2309, 2302, 2318, 2319,    0,

     2311, 2317, 2302, 2327, 2317, 2314, 2316, 2312,    0,    0,
     2332, 2303, 2334, 2318, 2332, 2320, 2334, 2325, 2338, 2326,
     2331, 2343, 2336, 2331, 2336, 2339,    0, 2329, 2341, 2346,
     2347, 2348, 2353, 2350, 2342, 2339, 2334, 2334, 2356, 2355,
     2357, 2344, 2361, 2341, 2354, 2347, 2349,    0, 2365, 2350,
     2365, 2363, 2353, 2368, 2352, 2364, 2377, 2348, 2349, 2369,
     2376, 2358, 2381, 2377, 2367, 2375, 2385, 2374, 2384, 2390,
     2377, 2373,    0, 2345, 2350, 2391, 2388,    0,    0, 2393,
        0, 2379, 2386, 2400,    0,    0, 2387,    0, 2392, 2399,
     2389, 2401,    0,    0,    0, 2376,    0, 2403, 2400, 2405,

        0,    0, 2395,    0, 2394, 2401, 2396, 2414, 2404, 2399,
     2417, 2416, 2415, 2406, 2402, 2418, 2393, 2421, 2422, 2422,
     2413, 2420, 2425, 2428, 2417, 2419, 2414, 2422, 2435,    0,
        0,    0,    0,    0, 2428, 2420,    0, 2417, 2422, 2429,
     2423, 2442, 2436, 2427,    0, 2427, 2434,    0,    0,    0,
     2445, 2437, 2438, 2450, 2444, 2438, 2442, 2441, 2437,    0,
     2443, 2427, 2438,    0, 2456,    0, 2442,    0, 2455, 2448,
     2448,    0, 2464, 2454, 2462, 2437, 2448, 2450,    0,    0,
        0,    0, 2464,    0, 2460, 2471, 2460, 2467,    0, 2472,
     2447, 2472, 2467, 2466, 2470, 2452, 2475, 2466, 2484, 2483,

     2469, 2472, 2473, 2480, 2482, 2477, 2447, 2449, 2494, 2494,
     2484,    0, 2496, 2497, 2493, 2501, 2488,    0, 2504, 2496,
     2491, 2499, 2508,    0,    0, 2501, 2509, 2502, 2491, 2502,
     2504, 2501, 2502, 2500, 2491, 2504, 2512, 2494, 2495,    0,
     2518, 2514, 2511, 2529, 2508, 2512, 2515, 2529, 2521, 2533,
        0, 2532, 2520, 2530, 2529, 2527, 2537, 2522, 2533, 2544,
     2515, 2532, 2533, 2537, 2549, 2533, 2547, 2548, 2523,    0,
     2552, 2537, 2526, 2547, 2547, 2544, 2549, 2549, 2545, 2539,
     2547, 2563, 2553, 2537, 2564, 2565, 2551, 2554, 2570, 2555,
     2571, 2564, 2572, 2562, 2579, 2566, 2567, 2568, 2579, 2564,

     2581,    0, 2586, 2585, 2580, 2559, 2590, 2587,    0, 2575,
        0,    0, 2574, 2587,    0, 2584,    0, 2593, 2594, 2591,
     2591, 2596,    0,    0,    0, 2571, 2602, 2603,    0, 2584,
     2602, 2598, 2590, 2595, 2594, 2592, 2603, 2597, 2613, 2601,
     2605, 2605, 2606, 2606, 2603, 2607, 2605, 2615,    0, 2608,
     2612, 2614,    0, 2625, 2613, 2616,    0, 2617, 2624, 2635,
     2621, 2635,    0,    0,    0, 2640, 2629, 2628,    0, 2631,
        0, 2640,    0, 2631, 2646, 2643,    0, 2631, 2635, 2643,
        0, 2636,    0, 2650, 2645, 2624, 2647, 2654, 2653, 2644,
     2642, 2630, 2642, 2643, 2652, 2654, 2663, 2651, 2654, 2657,

     2650, 2656, 2668, 2660,    0, 2673,    0, 2655, 2671,    0,
        0, 2662, 2677, 2678, 2665, 2661, 2675, 2668, 2672, 2670,
     2686, 2685, 2669, 2660, 2673, 2692, 2687, 2690, 2681, 2697,
     2690, 2692, 2686, 2682, 2684, 2696, 2701, 2702, 2696, 2700,
     2712, 2701, 2695, 2698, 2714,    0, 2714,    0, 2709, 2720,
     2713, 2692, 2693, 2707, 2725, 2706, 2727, 2698, 2726, 2724,
     2729, 2732, 2722, 2710, 2716, 2718, 2724, 2736, 2736, 2741,
     2740, 2742, 2727, 2731, 2742, 2733, 2737, 2719, 2731,    0,
     2749, 2748, 2745, 2741, 2752, 2752, 2750, 2755, 2759,    0,
        0, 2751,    0, 2750, 2763, 2761, 2762, 2737, 2768, 2750,

     2765, 2741, 2754, 2767, 2755, 2757, 2772, 2758, 2761, 2766,
     2761, 2782, 2758, 2770, 2762, 2774, 2772, 2777, 2778, 2772,
        0, 2773, 2775, 2776, 2783, 2777,    0, 2796,    0,    0,
     2793,    0,    0, 2780, 2780, 2788, 2789, 2772, 2785, 2791,
     2782, 2793, 2805, 2804, 2805, 2791, 2806, 2801, 2795, 2796,
     2807, 2803, 2813, 2810, 2806, 2809, 2808, 2823, 2824, 2812,
     2809, 2810, 2798, 2828, 2822, 2807,    0, 2818, 2803, 2832,
     2818, 2831, 2825,    0, 2819, 2836,    0, 2831, 2811,    0,
     2829, 2825, 2826, 2831, 2834, 2842, 2833, 2843,    0, 2834,
     2840, 2840, 2853, 2841, 2839, 2834, 2855, 2845, 2842, 2858,

     2859, 2850,    0,    0, 2847, 2866, 2849, 2850,    0, 2850,
     2853, 2861, 2848, 2873, 2874, 2863, 2866, 2858,    0,    0,
     2864,    0,    0, 2849, 2866, 2873, 2874, 2876, 2870, 2855,
     2884, 2870, 2876, 2887, 2886, 2871, 2881, 2885, 2883, 2865,
     2866, 2883, 2898, 2880, 2886,    0, 2888, 2883, 2903, 2900,
     2887, 2902, 2899,    0, 2904, 2903, 2909, 2909, 2902,    0,
     2896, 2901, 2901, 2902, 2900, 2889, 2901, 2891,    0, 2892,
     2919,    0,    0,    0, 2904,    0,    0, 2925, 2918,    0,
     2920,    0, 2920,    0,    0, 2899, 2912, 2913, 2932,    0,
        0, 2920, 2915, 2918, 2918, 2935, 2924, 2926, 2921, 2941,

     2938, 2939, 2920,    0, 2930, 2916, 2934, 2924, 2935, 2930,
     2938, 2939, 2949, 2941, 2925, 2948, 2933, 2956, 2955, 2942,
     2947, 2960, 2946, 2963, 2956, 2949,    0, 2955, 2957, 2968,
     2950, 2952, 2961,    0, 2973, 2956,    0, 2958, 2973, 2963,
     2970, 2965, 2968, 2971, 2972, 2965, 2980, 2981, 2974, 2979,
     2970, 2988, 2960, 2983, 2968, 2991, 2976,    0, 2984, 2989,
     2967,    0, 2985, 2984, 2989, 2991, 2998, 2973, 3000, 2993,
     2976, 2988, 2989, 3007, 2997, 2992, 2998, 3004, 3010, 3007,
        0, 2992, 3008, 3003,    0, 3012, 3010, 3018, 3019,    0,
     3011, 3010, 3013, 3027,    0,    0, 3018, 2999, 3019,    0,

     3017,    0, 3023, 3029, 3022, 3005, 3017, 3035, 3034, 3035,
     3026, 3030,    0, 3018,    0, 3026, 3024, 3040, 3038, 3043,
     3030, 3042,    0, 3051, 3022, 3023, 3034, 3051, 3054, 3042,
        0, 3054,    0, 3041, 3052, 3042,    0, 3044,    0,    0,
     3045,    0, 3060, 3061, 3053, 3063, 3063, 3061, 3066, 3052,
     3064, 3073, 3071, 3067, 3063, 3053,    0,    0, 3063, 3074,
     3068, 3063, 3074, 3069, 3073, 3081, 3082, 3072, 3086, 3070,
     3071, 3089, 3073, 3087,    0,    0, 3084, 3083, 3081, 3079,
     3096, 3094, 3089, 3084, 3095, 3090, 3094,    0, 3100, 3096,
        0,    0, 3100, 3105, 3108, 3099, 3099, 3109, 3109, 3107,

     3103, 3087, 3099, 3089, 3102, 3102,    0, 3109,    0, 3108,
     3110,    0, 3106, 3118, 3123, 3126, 3117, 3117, 3127, 3125,
     3109, 3132, 3117, 3136, 3133,    0,    0, 3133, 3127, 3121,
     3127, 3124, 3139,    0,    0,    0, 3125, 3128,    0, 3144,
     3129, 3148, 3145,    0,    0, 3131,    0, 3143, 3150, 3142,
     3136, 3147, 3152, 3140, 3157,    0, 3146, 3136, 3142, 3154,
     3161, 3153, 3147,    0, 3162, 3167, 3164, 3167, 3168, 3153,
     3148, 3164, 3155,    0,    0, 3171, 3176, 3173, 3176, 3166,
     3169,    0, 3181, 3174, 3181,    0, 3180, 3168, 3173, 3176,
        0, 3188, 3187, 3186, 3180, 3188, 3193, 3192, 3171, 3194,

     3193, 3187, 3175,    0, 3196, 3188, 3191, 3184,    0, 3180,
        0, 3201,    0,    0, 3204, 3203, 3190,    0,    0, 3185,
        0,    0,    0, 3741, 3235, 3237, 3239
    } ;

static yyconst short int yy_def[3628] =
    {   0,
     3624,    1, 3624, 3624, 3624, 3624, 3624, 3625, 3624, 3624,
     3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624,
     3624, 3624, 3624, 3624, 3624, 3624, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3624, 3624, 3624, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3624, 3624, 3624,
     3624, 3624, 3625, 3624, 3625, 3624, 3624, 3624, 3624, 3624,
     3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3627, 3624,
     3624, 3624, 3624, 3624, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3625, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3624,
     3624, 3624, 3624, 3624, 3624, 3624, 3624, 3627, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3624, 3624, 3624, 3624, 3624,
     3624, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3624, 3624, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626,    0, 3624, 3624, 3624
    } ;

static yyconst short int yy_nxt[3828] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   20,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   28,   33,   34,   28,   28,   35,   36,   37,   38,
       39,   28,   40,   41,   42,   28,   43,   28,   28,   28,
       44,   45,    4,   46,   47,   28,   48,   28,   49,   50,
       51,   52,   28,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   62,   63,   64,   65,   28,   66,   67,   28,
       28,   28,   68,   69,   70,   71,   74,   79,   81,   83,
       83,   83,   83,   84,   90,   91,   93,   94,   82,   80,

       86,   85,   87,   87,   87,   87,   86,  111,   87,   87,
       87,   87,  829,  101,   96,  105,   88,  164,   97,  106,
      102,  157,   88,   98,  103,   99,  124,  104,  112,  127,
      125,  100,  165,  158,   75,   89,  113,  118,  131,  128,
      126,  119,  114,  129,  166,  120,  130,   88,   74,   74,
      167,  132,  138,   88,  121,  122,  133,  123,  134,  139,
      140,  143,  144,  161,  141,  146,   89,  149,  147,  153,
      830,  145,  206,  162,  142,  150,  231,  154,  232,  163,
       83,   83,   83,   83,  173,  173,  173,  173,   86,  207,
       87,   87,   87,   87,  171,  172,   75,   75,  174,  175,

      176,  228,  176,  216,   88,  177,  177,  177,  177,  189,
      196,  202,  203,  212,  190,  197,  220,  245,  204,  213,
      217,  229,  246,  247,  249,  171,  172,  255,  214,  174,
      175,  248,  260,  221,  256,   88,  173,  173,  173,  173,
      266,  321,  266,  322,  250,  267,  267,  267,  267,  261,
      268,  269,  270,  296,  270,  618,  673,  271,  271,  271,
      271,  177,  177,  177,  177,  177,  177,  177,  177,  619,
      674,  297,  267,  267,  267,  267,  267,  267,  267,  267,
      386,  268,  269,  271,  271,  271,  271,  358,  831,  358,
      461,  172,  359,  359,  359,  359,  271,  271,  271,  271,

      384,  462,  387,  684,  385,  359,  359,  359,  359,  685,
      463,  175,  359,  359,  359,  359,  453,  465,  466,  467,
      470,  525,  172,  468,  469,  526,  620,  269,  454,  455,
      456,  475,  457,  458,  476,  621,  477,  471,  472,  473,
      832,  833,  175,  478,  479,  488,  834,  489,  504,  494,
      495,  505,  772,  496,  497,  498,  518,  490,  269,  519,
      499,  520,  773,  500,  491,  501,  502,  503,  521,  522,
      625,  835,  523,  555,  556,  557,  581,  626,  558,  585,
      582,  559,  590,  586,  628,  560,  591,  561,  631,  629,
      630,  562,  563,  587,  675,  564,  778,  757,  836,  725,

      689,  690,  676,  837,  770,  677,  691,  779,  632,  838,
      692,  693,  694,  726,  695,  758,  696,  697,  698,  797,
      699,  798,  700,  738,  739,  813,  839,  740,  771,  840,
      747,  748,  701,  749,  741,  742,  743,  823,  744,  814,
      750,  745,  746,  788,  789,  790,  816,  824,  817,  841,
      843,  844,  853,  842,  854,  846,  847,  791,  848,  792,
      793,  855,  849,  863,  864,  865,  850,  845,  866,  851,
      867,  852,  856,  857,  877,  858,  868,  885,  886,  859,
      887,  888,  869,  860,  870,  889,  861,  878,  862,  879,
      871,  880,  890,  872,  891,  892,  873,  881,  882,  874,

      875,  876,  893,  883,  894,  895,  884,  896,  897,  898,
      899,  900,  901,  902,  903,  904,  905,  906,  907,  908,
      909,  910,  911,  912,  913,  914,  915,  916,  917,  918,
      919,  920,  921,  922,  923,  924,  925,  926,  927,  928,
      929,  930,  931,  932,  933,  934,  935,  936,  937,  938,
      939,  940,  941,  942,  943,  944,  945,  946,  947,  948,
      949,  950,  951,  952,  953,  954,  955,  957,  958,  959,
      960,  961,  962,  963,  964,  965,  966,  967,  968,  956,
      970,  971,  972,  977,  973,  978,  979,  980,  969,  981,
      982,  991,  992,  974,  983,  984,  975,  993,  994,  985,

      976,  986,  995,  996,  997,  987,  998,  999, 1000, 1001,
     1002,  988, 1003,  989, 1004,  990, 1005, 1006, 1007, 1008,
     1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
     1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
     1030, 1031, 1032, 1029, 1034, 1035, 1037, 1039, 1040, 1041,
     1043, 1044, 1045, 1036, 1046, 1048, 1049, 1038, 1051, 1053,
     1042, 1054, 1055, 1057, 1050, 1058, 1033, 1059, 1060, 1052,
     1061, 1062, 1063, 1056, 1064, 1065, 1066, 1067, 1047, 1068,
     1069, 1071, 1072, 1073, 1074, 1070, 1075, 1076, 1078, 1079,
     1077, 1081, 1082, 1083, 1084, 1080, 1085, 1088, 1086, 1087,

     1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
     1099, 1100, 1101, 1102, 1103, 1104, 1106, 1107, 1108, 1109,
     1110, 1111, 1112, 1113, 1114, 1115, 1116, 1105, 1117, 1118,
     1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128,
     1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138,
     1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148,
     1154, 1155, 1156, 1157, 1158, 1159, 1149, 1160, 1161, 1163,
     1150, 1164, 1151, 1152, 1165, 1166, 1167, 1153, 1168, 1169,
     1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179,
     1181, 1182, 1162, 1183, 1184, 1185, 1186, 1187, 1188, 1189,

     1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1180,
     1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208,
     1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218,
     1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228,
     1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238,
     1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248,
     1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258,
     1259, 1260, 1261, 1262, 1264, 1265, 1266, 1267, 1268, 1269,
     1270, 1271, 1272, 1273, 1274, 1263, 1275, 1276, 1277, 1278,
     1279, 1280, 1282, 1283, 1284, 1285, 1286, 1287, 1281, 1294,

     1295, 1288, 1296, 1297, 1298, 1299, 1289, 1300, 1290, 1291,
     1301, 1306, 1307, 1292, 1293, 1308, 1302, 1303, 1309, 1310,
     1311, 1304, 1305, 1312, 1313, 1314, 1315, 1316, 1317, 1318,
     1319, 1320, 1321, 1322, 1323, 1324, 1325, 1332, 1333, 1326,
     1334, 1335, 1336, 1339, 1327, 1340, 1328, 1341, 1342, 1343,
     1344, 1329, 1330, 1345, 1346, 1331, 1347, 1337, 1338, 1348,
     1349, 1350, 1351, 1356, 1366, 1364, 1357, 1358, 1367, 1368,
     1359, 1369, 1372, 1375, 1360, 1352, 1365, 1353, 1354, 1355,
     1361, 1362, 1370, 1373, 1363, 1376, 1377, 1374, 1378, 1379,
     1371, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388,

     1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
     1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408,
     1409, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419,
     1420, 1421, 1422, 1423, 1410, 1424, 1425, 1426, 1427, 1428,
     1429, 1430, 1431, 1432, 1433, 1434, 1435, 1437, 1438, 1439,
     1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449,
     1450, 1451, 1452, 1436, 1453, 1454, 1455, 1456, 1457, 1458,
     1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468,
     1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478,
     1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1488, 1487,

     1489, 1490, 1491, 1492, 1493, 1494, 1496, 1497, 1498, 1499,
     1500, 1501, 1502, 1506, 1503, 1507, 1510, 1495, 1504, 1508,
     1509, 1511, 1505, 1512, 1513, 1514, 1515, 1516, 1517, 1518,
     1519, 1520, 1521, 1526, 1522, 1523, 1527, 1530, 1532, 1534,
     1535, 1536, 1537, 1538, 1531, 1541, 1533, 1528, 1542, 1524,
     1544, 1525, 1545, 1529, 1539, 1540, 1546, 1547, 1543, 1548,
     1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558,
     1562, 1563, 1564, 1559, 1560, 1561, 1565, 1566, 1567, 1568,
     1569, 1571, 1573, 1574, 1575, 1576, 1578, 1572, 1577, 1579,
     1580, 1581, 1582, 1570, 1583, 1584, 1585, 1586, 1587, 1588,

     1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598,
     1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608,
     1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618,
     1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628,
     1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638,
     1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648,
     1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658,
     1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1668, 1669,
     1670, 1671, 1672, 1667, 1673, 1674, 1675, 1676, 1677, 1678,
     1679, 1680, 1681, 1683, 1684, 1685, 1686, 1687, 1682, 1688,

     1689, 1690, 1691, 1692, 1693, 1694, 1696, 1697, 1695, 1698,
     1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1711,
     1712, 1713, 1716, 1714, 1717, 1718, 1720, 1721, 1722, 1708,
     1715, 1723, 1724, 1725, 1726, 1709, 1727, 1728, 1710, 1729,
     1730, 1731, 1719, 1732, 1733, 1735, 1736, 1737, 1738, 1739,
     1734, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748,
     1749, 1750, 1752, 1753, 1754, 1755, 1756, 1757, 1759, 1760,
     1761, 1762, 1763, 1764, 1765, 1751, 1766, 1767, 1768, 1758,
     1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778,
     1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788,

     1789, 1790, 1797, 1791, 1795, 1792, 1798, 1799, 1800, 1801,
     1802, 1803, 1804, 1805, 1807, 1808, 1809, 1793, 1794, 1796,
     1810, 1811, 1812, 1813, 1814, 1806, 1815, 1816, 1817, 1818,
     1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828,
     1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838,
     1839, 1840, 1841, 1842, 1843, 1844, 1847, 1848, 1845, 1849,
     1850, 1851, 1852, 1846, 1853, 1859, 1860, 1861, 1862, 1863,
     1864, 1865, 1866, 1867, 1868, 1869, 1854, 1855, 1856, 1870,
     1871, 1857, 1858, 1872, 1873, 1874, 1875, 1876, 1877, 1878,
     1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888,

     1889, 1890, 1891, 1892, 1893, 1894, 1898, 1899, 1900, 1901,
     1902, 1903, 1906, 1895, 1904, 1907, 1908, 1896, 1897, 1909,
     1905, 1910, 1911, 1912, 1913, 1915, 1916, 1917, 1919, 1920,
     1921, 1918, 1914, 1922, 1923, 1924, 1925, 1926, 1927, 1928,
     1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938,
     1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948,
     1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958,
     1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968,
     1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978,
     1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988,

     1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
     1999, 2000, 2001, 2002, 2003, 2004, 2009, 2010, 2011, 2017,
     2005, 2012, 2013, 2014, 2006, 2007, 2008, 2018, 2019, 2020,
     2021, 2022, 2023, 2024, 2015, 2025, 2026, 2027, 2028, 2016,
     2029, 2030, 2031, 2032, 2033, 2034, 2036, 2037, 2038, 2039,
     2040, 2041, 2042, 2043, 2044, 2045, 2046, 2048, 2049, 2035,
     2050, 2051, 2052, 2053, 2054, 2055, 2056, 2047, 2057, 2058,
     2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068,
     2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078,
     2079, 2080, 2081, 2082, 2083, 2085, 2086, 2084, 2088, 2089,

     2090, 2091, 2092, 2093, 2094, 2095, 2087, 2096, 2097, 2098,
     2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108,
     2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118,
     2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2133, 2134,
     2135, 2136, 2127, 2128, 2137, 2138, 2129, 2139, 2130, 2131,
     2140, 2141, 2142, 2132, 2143, 2144, 2145, 2146, 2147, 2148,
     2149, 2152, 2150, 2153, 2154, 2155, 2156, 2157, 2158, 2159,
     2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2151, 2168,
     2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178,
     2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188,

     2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2200,
     2201, 2198, 2202, 2203, 2205, 2206, 2207, 2208, 2209, 2210,
     2211, 2212, 2213, 2199, 2214, 2215, 2216, 2204, 2217, 2220,
     2221, 2222, 2223, 2224, 2225, 2226, 2227, 2218, 2228, 2229,
     2230, 2231, 2232, 2219, 2233, 2234, 2235, 2236, 2237, 2238,
     2239, 2240, 2241, 2242, 2243, 2244, 2245, 2246, 2247, 2248,
     2249, 2250, 2251, 2252, 2253, 2254, 2255, 2256, 2257, 2258,
     2259, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268,
     2269, 2274, 2275, 2270, 2276, 2277, 2271, 2278, 2279, 2280,
     2281, 2282, 2283, 2272, 2273, 2284, 2285, 2286, 2287, 2288,

     2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298,
     2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308,
     2309, 2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317, 2318,
     2319, 2320, 2321, 2322, 2323, 2324, 2325, 2326, 2327, 2328,
     2329, 2330, 2331, 2332, 2333, 2338, 2335, 2334, 2336, 2337,
     2339, 2340, 2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348,
     2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358,
     2359, 2360, 2361, 2362, 2363, 2364, 2365, 2366, 2367, 2368,
     2369, 2370, 2371, 2372, 2375, 2373, 2376, 2377, 2378, 2379,
     2380, 2381, 2374, 2382, 2383, 2385, 2386, 2387, 2388, 2389,

     2390, 2391, 2392, 2393, 2394, 2395, 2396, 2397, 2384, 2399,
     2400, 2401, 2402, 2403, 2404, 2398, 2405, 2406, 2407, 2408,
     2409, 2410, 2411, 2412, 2413, 2414, 2415, 2416, 2417, 2418,
     2419, 2420, 2421, 2422, 2423, 2424, 2425, 2426, 2427, 2428,
     2429, 2430, 2431, 2432, 2433, 2434, 2435, 2436, 2437, 2438,
     2440, 2441, 2442, 2443, 2444, 2445, 2446, 2447, 2448, 2439,
     2449, 2450, 2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458,
     2459, 2460, 2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468,
     2469, 2470, 2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478,
     2479, 2480, 2483, 2481, 2484, 2485, 2486, 2487, 2488, 2489,

     2490, 2491, 2492, 2493, 2494, 2495, 2496, 2497, 2498, 2482,
     2499, 2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507, 2508,
     2509, 2515, 2510, 2512, 2516, 2517, 2518, 2521, 2519, 2511,
     2520, 2513, 2522, 2523, 2524, 2525, 2526, 2527, 2514, 2528,
     2529, 2530, 2531, 2532, 2533, 2534, 2535, 2536, 2537, 2538,
     2539, 2540, 2541, 2542, 2543, 2544, 2545, 2546, 2547, 2549,
     2550, 2551, 2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559,
     2560, 2561, 2548, 2562, 2563, 2564, 2565, 2566, 2567, 2568,
     2569, 2570, 2571, 2572, 2573, 2574, 2575, 2576, 2577, 2578,
     2579, 2580, 2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588,

     2589, 2590, 2591, 2592, 2593, 2594, 2595, 2596, 2597, 2598,
     2599, 2600, 2601, 2603, 2608, 2609, 2602, 2610, 2611, 2612,
     2613, 2614, 2615, 2604, 2616, 2618, 2605, 2617, 2620, 2606,
     2607, 2621, 2622, 2623, 2625, 2626, 2627, 2624, 2628, 2629,
     2631, 2619, 2632, 2633, 2634, 2635, 2638, 2639, 2636, 2637,
     2640, 2641, 2642, 2643, 2644, 2630, 2645, 2646, 2647, 2648,
     2649, 2650, 2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658,
     2659, 2660, 2661, 2662, 2663, 2664, 2665, 2666, 2667, 2668,
     2669, 2670, 2671, 2672, 2673, 2674, 2675, 2676, 2678, 2679,
     2680, 2681, 2682, 2677, 2683, 2685, 2686, 2687, 2688, 2689,

     2690, 2691, 2692, 2693, 2694, 2684, 2695, 2696, 2697, 2698,
     2699, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2714, 2707,
     2708, 2715, 2709, 2710, 2716, 2717, 2718, 2719, 2711, 2720,
     2724, 2721, 2725, 2722, 2726, 2712, 2713, 2723, 2727, 2728,
     2729, 2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738,
     2739, 2740, 2741, 2742, 2743, 2744, 2745, 2746, 2747, 2748,
     2749, 2750, 2751, 2752, 2753, 2754, 2755, 2756, 2757, 2758,
     2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768,
     2769, 2770, 2771, 2772, 2773, 2774, 2776, 2777, 2778, 2779,
     2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787, 2788, 2775,

     2789, 2790, 2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798,
     2799, 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808,
     2809, 2810, 2811, 2812, 2813, 2814, 2815, 2816, 2817, 2818,
     2819, 2820, 2821, 2822, 2823, 2824, 2825, 2826, 2827, 2828,
     2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838,
     2839, 2840, 2841, 2842, 2843, 2844, 2845, 2846, 2847, 2848,
     2849, 2850, 2851, 2852, 2853, 2854, 2855, 2856, 2857, 2858,
     2859, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868,
     2869, 2870, 2871, 2872, 2873, 2874, 2875, 2876, 2877, 2878,
     2880, 2881, 2882, 2883, 2884, 2885, 2886, 2879, 2887, 2888,

     2889, 2890, 2891, 2892, 2896, 2898, 2899, 2900, 2901, 2897,
     2902, 2903, 2904, 2905, 2906, 2907, 2893, 2894, 2908, 2895,
     2909, 2910, 2911, 2912, 2913, 2914, 2915, 2916, 2917, 2918,
     2919, 2920, 2921, 2922, 2923, 2924, 2925, 2926, 2927, 2928,
     2929, 2930, 2931, 2932, 2933, 2934, 2935, 2936, 2937, 2938,
     2939, 2940, 2941, 2942, 2943, 2944, 2945, 2946, 2947, 2948,
     2949, 2950, 2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958,
     2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968,
     2969, 2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978,
     2979, 2981, 2982, 2983, 2984, 2985, 2986, 2987, 2988, 2989,

     2990, 2991, 2992, 2980, 2993, 2994, 2995, 2996, 2997, 2998,
     2999, 3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008,
     3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018,
     3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3034,
     3035, 3028, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3029,
     3043, 3044, 3045, 3030, 3046, 3047, 3031, 3032, 3033, 3048,
     3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058,
     3059, 3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068,
     3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078,
     3079, 3080, 3081, 3082, 3083, 3084, 3085, 3088, 3089, 3090,

     3091, 3092, 3093, 3094, 3095, 3096, 3097, 3086, 3098, 3099,
     3100, 3101, 3087, 3102, 3103, 3104, 3105, 3106, 3107, 3109,
     3110, 3115, 3111, 3113, 3118, 3116, 3120, 3121, 3119, 3122,
     3123, 3124, 3108, 3112, 3114, 3125, 3126, 3127, 3128, 3129,
     3130, 3117, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138,
     3139, 3140, 3141, 3143, 3144, 3145, 3146, 3147, 3148, 3149,
     3142, 3150, 3151, 3152, 3153, 3155, 3156, 3157, 3158, 3159,
     3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169,
     3154, 3170, 3172, 3173, 3174, 3171, 3175, 3176, 3177, 3178,
     3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3189,

     3190, 3191, 3192, 3188, 3193, 3194, 3195, 3196, 3197, 3198,
     3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208,
     3209, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218,
     3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227, 3228,
     3229, 3230, 3231, 3233, 3234, 3235, 3232, 3236, 3237, 3238,
     3239, 3240, 3241, 3242, 3243, 3245, 3246, 3247, 3248, 3249,
     3250, 3251, 3252, 3253, 3254, 3255, 3256, 3259, 3257, 3260,
     3261, 3244, 3258, 3262, 3263, 3264, 3265, 3266, 3267, 3268,
     3269, 3270, 3271, 3272, 3273, 3274, 3275, 3276, 3277, 3278,
     3279, 3280, 3281, 3282, 3283, 3284, 3285, 3286, 3287, 3288,

     3289, 3290, 3291, 3292, 3293, 3294, 3295, 3296, 3297, 3298,
     3299, 3300, 3301, 3302, 3303, 3304, 3305, 3306, 3307, 3308,
     3309, 3310, 3311, 3312, 3313, 3314, 3315, 3316, 3317, 3318,
     3319, 3320, 3321, 3322, 3323, 3325, 3326, 3327, 3328, 3329,
     3330, 3331, 3324, 3332, 3333, 3334, 3335, 3336, 3337, 3338,
     3339, 3340, 3341, 3342, 3343, 3344, 3345, 3346, 3347, 3348,
     3349, 3350, 3351, 3352, 3353, 3354, 3355, 3356, 3357, 3358,
     3359, 3360, 3361, 3362, 3363, 3364, 3365, 3366, 3367, 3368,
     3369, 3370, 3371, 3372, 3373, 3374, 3375, 3376, 3377, 3378,
     3379, 3380, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388,

     3389, 3390, 3391, 3392, 3393, 3394, 3395, 3396, 3397, 3398,
     3399, 3400, 3401, 3402, 3403, 3404, 3405, 3406, 3407, 3408,
     3409, 3410, 3411, 3412, 3413, 3414, 3415, 3416, 3417, 3418,
     3420, 3421, 3422, 3423, 3424, 3425, 3426, 3427, 3428, 3429,
     3430, 3431, 3432, 3433, 3419, 3434, 3435, 3436, 3437, 3438,
     3439, 3440, 3441, 3442, 3443, 3444, 3445, 3446, 3447, 3449,
     3450, 3451, 3452, 3453, 3454, 3455, 3456, 3457, 3458, 3459,
     3460, 3461, 3462, 3448, 3463, 3464, 3465, 3466, 3467, 3468,
     3469, 3470, 3471, 3472, 3473, 3474, 3475, 3476, 3477, 3478,
     3479, 3480, 3481, 3482, 3483, 3484, 3485, 3486, 3487, 3488,

     3489, 3490, 3491, 3492, 3493, 3494, 3495, 3496, 3497, 3498,
     3499, 3501, 3502, 3503, 3504, 3505, 3506, 3507, 3508, 3509,
     3510, 3511, 3512, 3513, 3514, 3500, 3515, 3516, 3517, 3518,
     3519, 3520, 3521, 3522, 3523, 3524, 3525, 3526, 3527, 3528,
     3529, 3530, 3531, 3532, 3533, 3534, 3535, 3536, 3537, 3538,
     3539, 3540, 3541, 3542, 3543, 3544, 3545, 3546, 3547, 3548,
     3549, 3550, 3551, 3552, 3553, 3554, 3555, 3556, 3557, 3558,
     3559, 3560, 3561, 3562, 3563, 3564, 3565, 3566, 3567, 3568,
     3569, 3570, 3571, 3572, 3573, 3574, 3575, 3576, 3577, 3578,
     3579, 3580, 3581, 3582, 3583, 3584, 3585, 3586, 3587, 3588,

     3589, 3590, 3591, 3592, 3593, 3594, 3595, 3596, 3597, 3598,
     3599, 3600, 3601, 3602, 3603, 3604, 3605, 3606, 3607, 3608,
     3609, 3610, 3611, 3612, 3613, 3614, 3615, 3616, 3617, 3618,
     3619, 3620, 3621, 3622, 3623,   73,   73,   73,   95,   95,
      178,  828,  827,  826,  825,  822,  821,  820,  819,  818,
      815,  812,  811,  810,  809,  808,  807,  806,  805,  804,
      803,  802,  801,  800,  799,  796,  795,  794,  787,  786,
      785,  784,  783,  782,  781,  780,  777,  776,  775,  774,
      769,  768,  767,  766,  765,  764,  763,  762,  761,  760,
      759,  756,  755,  754,  753,  752,  751,  737,  736,  735,

      734,  733,  732,  731,  730,  729,  728,  727,  724,  723,
      722,  721,  720,  719,  718,  717,  716,  715,  714,  713,
      712,  711,  710,  709,  708,  707,  706,  705,  704,  703,
      702,  688,  687,  686,  683,  682,  681,  680,  679,  678,
      672,  671,  670,  669,  668,  667,  666,  665,  664,  663,
      662,  661,  660,  659,  658,  657,  656,  655,  654,  653,
      652,  651,  650,  649,  648,  647,  646,  645,  644,  643,
      642,  641,  640,  639,  638,  637,  636,  635,  634,  633,
      627,  624,  623,  622,  617,  616,  615,  614,  613,  612,
      611,  610,  609,  608,  607,  606,  605,  604,  603,  602,

      601,  600,  599,  598,  597,  596,  595,  594,  593,  592,
      589,  588,  584,  583,  580,  579,  578,  577,  576,  575,
      574,  573,  572,  571,  570,  569,  568,  567,  566,  565,
      554,  553,  552,  551,  550,  549,  548,  547,  546,  545,
      544,  543,  542,  541,  540,  539,  538,  537,  536,  535,
      534,  533,  532,  531,  530,  529,  528,  527,  524,  517,
      516,  515,  514,  513,  512,  511,  510,  509,  508,  507,
      506,  493,  492,  487,  486,  485,  484,  483,  482,  481,
      480,  474,  464,  460,  459,  452,  451,  450,  449,  448,
      447,  446,  445,  444,  443,  442,  441,  440,  439,  438,

      437,  436,  435,  434,  433,  432,  431,  430,  429,  428,
      427,  426,  425,  424,  423,  422,  421,  420,  419,  418,
      417,  416,  415,  414,  413,  412,  411,  410,  409,  408,
      407,  406,  405,  404,  403,  402,  401,  400,  399,  398,
      397,  396,  395,  394,  393,  392,  391,  390,  389,  388,
      383,  382,  381,  380,  379,  378,  377,  376,  375,  374,
      373,  372,  371,  370,  369,  368,  367,  366,  365,  364,
      363,  362,  361,  360,  357,  356,  355,  354,  353,  352,
      351,  350,  349,  348,  347,  346,  345,  344,  343,  342,
      341,  340,  339,  338,  337,  336,  335,  334,  333,  332,

      331,  330,  329,  328,  327,  326,  325,  324,  323,  320,
      319,  318,  317,  316,  315,  314,  313,  312,  311,  310,
      309,  308,  307,  306,  305,  304,  303,  302,  301,  300,
      299,  298,  295,  294,  293,  292,  291,  290,  289,  288,
      287,  286,  285,  284,  283,  282,  281,  280,  279,  278,
      277,  276,  275,  274,  273,  272,  265,  264,  263,  262,
      259,  258,  257,  254,  253,  252,  251,  244,  243,  242,
      241,  240,  239,  238,  237,  236,  235,  234,  233,  230,
      227,  226,  225,  224,  223,  222,  219,  218,  215,  211,
      210,  209,  208,  205,  201,  200,  199,  198,  195,  194,

      193,  192,  191,  188,  187,  186,  185,  184,  183,  182,
      181,  180,  179, 3624,  170,  169,  168,  160,  159,  156,
      155,  152,  151,  148,  137,  136,  135,  117,  116,  115,
      110,  109,  108,  107,   92,   78,   77,   76,   72, 3624,
        3, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624,
     3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624,
     3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624,
     3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624,
     3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624,
     3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624,

     3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624,
     3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624,
     3624, 3624, 3624, 3624, 3624, 3624, 3624
    } ;

static yyconst short int yy_chk[3828] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    8,   14,   16,   17,
       17,   17,   17,   18,   23,   23,   25,   25,   16,   14,

       19,   18,   19,   19,   19,   19,   20,   35,   20,   20,
       20,   20,  677,   29,   27,   30,   19,   64,   27,   30,
       29,   60,   20,   27,   29,   27,   40,   29,   35,   41,
       40,   27,   64,   60,    8,   19,   35,   39,   42,   41,
       40,   39,   35,   41,   65,   39,   41,   19,   73,  111,
       65,   42,   49,   20,   39,   39,   42,   39,   42,   49,
       50,   51,   51,   63,   50,   52,   19,   54,   52,   57,
      678,   51,  120,   63,   50,   54,  139,   57,  139,   63,
       83,   83,   83,   83,   86,   86,   86,   86,   87,  120,
       87,   87,   87,   87,   83,   83,   73,  111,   86,   86,

       88,  137,   88,  127,   87,   88,   88,   88,   88,  106,
      113,  118,  118,  125,  106,  113,  130,  154,  118,  125,
      127,  137,  154,  155,  156,   83,   83,  161,  125,   86,
       86,  155,  165,  130,  161,   87,  173,  173,  173,  173,
      171,  228,  171,  228,  156,  171,  171,  171,  171,  165,
      173,  173,  174,  204,  174,  495,  553,  174,  174,  174,
      174,  176,  176,  176,  176,  177,  177,  177,  177,  495,
      553,  204,  266,  266,  266,  266,  267,  267,  267,  267,
      298,  173,  173,  270,  270,  270,  270,  268,  679,  268,
      373,  267,  268,  268,  268,  268,  271,  271,  271,  271,

      297,  373,  298,  562,  297,  358,  358,  358,  358,  562,
      373,  271,  359,  359,  359,  359,  369,  375,  375,  375,
      376,  408,  267,  375,  375,  408,  496,  359,  369,  369,
      369,  378,  369,  369,  378,  496,  378,  376,  376,  376,
      680,  681,  271,  378,  378,  387,  682,  387,  391,  390,
      390,  391,  626,  390,  390,  390,  406,  387,  359,  406,
      390,  406,  626,  390,  387,  390,  390,  390,  406,  406,
      500,  683,  406,  445,  445,  445,  462,  500,  445,  465,
      462,  445,  468,  465,  502,  445,  468,  445,  503,  502,
      502,  445,  445,  465,  555,  445,  631,  613,  684,  592,

      567,  567,  555,  685,  625,  555,  567,  631,  503,  686,
      567,  567,  567,  592,  567,  613,  567,  568,  568,  645,
      568,  645,  568,  604,  604,  664,  687,  604,  625,  688,
      605,  605,  568,  605,  604,  604,  604,  672,  604,  664,
      605,  604,  604,  641,  641,  641,  666,  672,  666,  689,
      690,  691,  693,  689,  694,  692,  692,  641,  692,  641,
      641,  695,  692,  697,  698,  699,  692,  691,  700,  692,
      701,  692,  696,  696,  703,  696,  701,  705,  706,  696,
      707,  708,  702,  696,  702,  709,  696,  704,  696,  704,
      702,  704,  710,  702,  711,  712,  702,  704,  704,  702,

      702,  702,  713,  704,  714,  715,  704,  716,  717,  718,
      719,  720,  721,  722,  723,  724,  725,  726,  727,  728,
      730,  731,  732,  733,  734,  735,  736,  738,  739,  740,
      741,  742,  743,  744,  745,  746,  747,  748,  749,  750,
      751,  752,  754,  756,  757,  758,  759,  760,  761,  762,
      763,  764,  765,  766,  767,  768,  769,  770,  771,  772,
      773,  774,  775,  776,  777,  778,  779,  780,  781,  782,
      783,  784,  785,  786,  788,  789,  790,  791,  792,  779,
      793,  794,  795,  796,  795,  797,  798,  800,  792,  801,
      802,  804,  805,  795,  803,  803,  795,  806,  807,  803,

      795,  803,  808,  809,  810,  803,  811,  812,  813,  814,
      815,  803,  816,  803,  817,  803,  818,  819,  820,  822,
      823,  824,  825,  826,  827,  828,  829,  830,  831,  832,
      833,  834,  835,  836,  837,  838,  839,  841,  842,  843,
      844,  845,  846,  843,  847,  848,  849,  850,  851,  852,
      853,  854,  855,  848,  856,  857,  858,  849,  859,  860,
      852,  861,  862,  863,  858,  864,  846,  865,  866,  859,
      867,  868,  869,  862,  870,  871,  872,  873,  856,  874,
      875,  876,  877,  878,  879,  875,  880,  881,  882,  883,
      881,  884,  887,  888,  889,  883,  890,  891,  890,  890,

      892,  893,  894,  895,  896,  897,  898,  899,  900,  901,
      902,  903,  904,  905,  906,  907,  910,  912,  913,  915,
      916,  917,  918,  919,  920,  921,  922,  907,  923,  924,
      925,  926,  927,  928,  929,  930,  931,  933,  935,  938,
      939,  940,  941,  942,  944,  945,  946,  947,  948,  949,
      950,  951,  952,  954,  955,  956,  957,  958,  959,  959,
      960,  961,  962,  963,  964,  965,  959,  966,  967,  968,
      959,  969,  959,  959,  970,  971,  972,  959,  973,  974,
      975,  976,  977,  978,  979,  980,  981,  982,  983,  984,
      985,  986,  967,  987,  988,  989,  990,  991,  992,  993,

      995,  996,  997,  998,  999, 1000, 1001, 1003, 1004,  984,
     1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1017,
     1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
     1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
     1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
     1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
     1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
     1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077,
     1078, 1079, 1080, 1082, 1083, 1071, 1084, 1085, 1086, 1087,
     1088, 1090, 1091, 1092, 1093, 1094, 1094, 1094, 1090, 1095,

     1098, 1094, 1101, 1102, 1103, 1104, 1094, 1105, 1094, 1094,
     1106, 1107, 1110, 1094, 1094, 1111, 1106, 1106, 1112, 1113,
     1114, 1106, 1106, 1117, 1118, 1119, 1120, 1121, 1122, 1123,
     1124, 1125, 1126, 1127, 1128, 1128, 1128, 1129, 1131, 1128,
     1132, 1133, 1133, 1134, 1128, 1135, 1128, 1136, 1137, 1138,
     1139, 1128, 1128, 1140, 1141, 1128, 1142, 1133, 1133, 1143,
     1144, 1145, 1145, 1146, 1148, 1147, 1146, 1146, 1149, 1150,
     1146, 1151, 1152, 1154, 1146, 1145, 1147, 1145, 1145, 1145,
     1146, 1146, 1151, 1153, 1146, 1156, 1157, 1153, 1158, 1159,
     1151, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168,

     1169, 1170, 1171, 1173, 1174, 1175, 1176, 1177, 1178, 1179,
     1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189,
     1190, 1192, 1193, 1194, 1196, 1197, 1198, 1201, 1202, 1203,
     1205, 1206, 1207, 1208, 1190, 1209, 1210, 1211, 1212, 1213,
     1214, 1215, 1216, 1218, 1219, 1222, 1222, 1225, 1226, 1228,
     1229, 1231, 1232, 1233, 1234, 1236, 1239, 1240, 1242, 1243,
     1245, 1246, 1247, 1222, 1248, 1249, 1250, 1251, 1252, 1253,
     1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263,
     1264, 1265, 1266, 1268, 1269, 1270, 1271, 1272, 1274, 1276,
     1277, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1285,

     1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1297,
     1299, 1300, 1301, 1303, 1302, 1304, 1306, 1292, 1302, 1305,
     1305, 1307, 1302, 1309, 1311, 1312, 1313, 1314, 1315, 1316,
     1317, 1318, 1320, 1322, 1320, 1320, 1323, 1324, 1325, 1326,
     1327, 1328, 1329, 1329, 1324, 1330, 1325, 1323, 1331, 1320,
     1332, 1320, 1333, 1323, 1329, 1329, 1334, 1335, 1331, 1336,
     1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346,
     1347, 1348, 1349, 1346, 1346, 1346, 1350, 1351, 1352, 1353,
     1354, 1355, 1356, 1357, 1357, 1358, 1359, 1355, 1358, 1360,
     1361, 1362, 1363, 1354, 1364, 1365, 1366, 1367, 1368, 1369,

     1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379,
     1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389,
     1390, 1391, 1392, 1393, 1394, 1397, 1398, 1399, 1400, 1401,
     1402, 1403, 1404, 1405, 1406, 1408, 1409, 1410, 1411, 1412,
     1413, 1414, 1415, 1416, 1418, 1421, 1422, 1423, 1426, 1427,
     1428, 1429, 1431, 1434, 1435, 1436, 1441, 1445, 1450, 1453,
     1454, 1455, 1456, 1458, 1459, 1460, 1461, 1463, 1464, 1465,
     1466, 1467, 1468, 1469, 1472, 1474, 1475, 1476, 1479, 1480,
     1481, 1482, 1483, 1476, 1484, 1485, 1486, 1487, 1488, 1489,
     1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1492, 1498,

     1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1504, 1507,
     1508, 1509, 1510, 1511, 1514, 1515, 1516, 1517, 1518, 1519,
     1520, 1521, 1523, 1522, 1524, 1525, 1526, 1527, 1528, 1518,
     1522, 1529, 1530, 1531, 1532, 1518, 1533, 1534, 1518, 1535,
     1536, 1537, 1525, 1538, 1539, 1540, 1541, 1542, 1543, 1544,
     1539, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1554, 1555,
     1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1565, 1566,
     1567, 1568, 1569, 1570, 1571, 1557, 1572, 1573, 1574, 1563,
     1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584,
     1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594,

     1595, 1595, 1597, 1595, 1596, 1595, 1598, 1599, 1600, 1601,
     1602, 1603, 1604, 1605, 1606, 1607, 1608, 1595, 1595, 1596,
     1609, 1610, 1613, 1614, 1615, 1605, 1616, 1617, 1618, 1619,
     1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1631,
     1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1642, 1643,
     1644, 1645, 1647, 1649, 1650, 1651, 1652, 1653, 1651, 1655,
     1657, 1660, 1661, 1651, 1662, 1663, 1664, 1666, 1667, 1668,
     1669, 1671, 1672, 1674, 1676, 1677, 1662, 1662, 1662, 1678,
     1679, 1662, 1662, 1680, 1681, 1682, 1683, 1684, 1685, 1686,
     1687, 1688, 1689, 1690, 1691, 1692, 1694, 1695, 1697, 1698,

     1699, 1700, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709,
     1710, 1711, 1713, 1705, 1712, 1714, 1715, 1705, 1705, 1716,
     1712, 1717, 1717, 1718, 1719, 1721, 1722, 1723, 1724, 1725,
     1726, 1723, 1719, 1727, 1728, 1729, 1730, 1731, 1732, 1733,
     1734, 1735, 1736, 1737, 1738, 1739, 1741, 1742, 1743, 1744,
     1745, 1746, 1747, 1750, 1751, 1752, 1753, 1754, 1755, 1756,
     1757, 1758, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767,
     1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777,
     1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787,
     1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797,

     1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1808,
     1810, 1811, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1821,
     1816, 1820, 1820, 1820, 1816, 1816, 1816, 1825, 1827, 1828,
     1830, 1831, 1832, 1833, 1820, 1834, 1835, 1837, 1838, 1820,
     1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848,
     1849, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1844,
     1859, 1860, 1861, 1862, 1863, 1864, 1865, 1856, 1866, 1867,
     1868, 1869, 1870, 1871, 1872, 1874, 1875, 1876, 1877, 1878,
     1879, 1880, 1881, 1882, 1883, 1884, 1886, 1887, 1888, 1889,
     1890, 1892, 1893, 1894, 1895, 1896, 1897, 1895, 1898, 1899,

     1900, 1901, 1902, 1903, 1904, 1905, 1897, 1906, 1907, 1908,
     1909, 1910, 1911, 1912, 1913, 1914, 1916, 1917, 1918, 1919,
     1920, 1922, 1923, 1924, 1926, 1927, 1928, 1929, 1930, 1932,
     1934, 1935, 1936, 1937, 1938, 1939, 1940, 1940, 1941, 1942,
     1943, 1944, 1940, 1940, 1946, 1947, 1940, 1948, 1940, 1940,
     1949, 1950, 1951, 1940, 1952, 1954, 1955, 1956, 1958, 1959,
     1960, 1961, 1960, 1962, 1963, 1964, 1965, 1966, 1967, 1969,
     1970, 1971, 1972, 1973, 1975, 1976, 1977, 1978, 1960, 1980,
     1981, 1982, 1983, 1984, 1985, 1986, 1987, 1987, 1988, 1989,
     1990, 1993, 1994, 1994, 1994, 1996, 1997, 1998, 1999, 2000,

     2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
     2011, 2009, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
     2020, 2021, 2022, 2009, 2023, 2027, 2028, 2013, 2029, 2030,
     2031, 2032, 2034, 2035, 2036, 2037, 2038, 2029, 2039, 2040,
     2041, 2043, 2044, 2029, 2045, 2046, 2047, 2048, 2049, 2051,
     2052, 2053, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063,
     2064, 2065, 2066, 2068, 2069, 2070, 2071, 2072, 2074, 2075,
     2076, 2078, 2079, 2080, 2082, 2083, 2084, 2085, 2086, 2087,
     2088, 2089, 2090, 2088, 2091, 2092, 2088, 2093, 2094, 2095,
     2096, 2097, 2098, 2088, 2088, 2099, 2100, 2101, 2102, 2103,

     2104, 2106, 2107, 2108, 2109, 2111, 2112, 2114, 2116, 2117,
     2119, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129,
     2130, 2131, 2132, 2133, 2134, 2135, 2137, 2139, 2140, 2141,
     2142, 2144, 2145, 2147, 2148, 2149, 2150, 2151, 2153, 2154,
     2155, 2156, 2157, 2158, 2159, 2161, 2160, 2159, 2160, 2160,
     2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171,
     2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2184,
     2185, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196,
     2197, 2198, 2199, 2200, 2201, 2200, 2202, 2203, 2204, 2205,
     2206, 2207, 2200, 2208, 2210, 2211, 2212, 2214, 2215, 2216,

     2217, 2218, 2219, 2222, 2224, 2225, 2226, 2227, 2210, 2228,
     2229, 2232, 2233, 2235, 2237, 2227, 2238, 2240, 2241, 2242,
     2244, 2245, 2246, 2247, 2248, 2249, 2252, 2254, 2256, 2257,
     2259, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268,
     2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2277,
     2278, 2279, 2280, 2281, 2282, 2283, 2285, 2286, 2287, 2277,
     2288, 2289, 2292, 2293, 2295, 2298, 2299, 2301, 2303, 2304,
     2305, 2306, 2307, 2308, 2309, 2310, 2311, 2313, 2314, 2315,
     2317, 2318, 2319, 2322, 2323, 2324, 2325, 2326, 2327, 2328,
     2329, 2330, 2331, 2330, 2332, 2333, 2334, 2335, 2336, 2337,

     2338, 2340, 2341, 2342, 2343, 2345, 2346, 2347, 2348, 2330,
     2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2360,
     2361, 2364, 2361, 2362, 2365, 2366, 2367, 2369, 2368, 2361,
     2368, 2362, 2370, 2371, 2372, 2373, 2374, 2375, 2362, 2376,
     2377, 2378, 2380, 2381, 2382, 2383, 2384, 2385, 2386, 2388,
     2389, 2390, 2391, 2392, 2393, 2394, 2395, 2396, 2397, 2398,
     2399, 2402, 2404, 2405, 2407, 2408, 2409, 2410, 2411, 2413,
     2414, 2418, 2397, 2419, 2421, 2422, 2423, 2424, 2425, 2426,
     2428, 2429, 2430, 2431, 2432, 2433, 2434, 2435, 2436, 2437,
     2438, 2439, 2440, 2441, 2444, 2445, 2446, 2447, 2448, 2449,

     2450, 2452, 2453, 2457, 2458, 2459, 2460, 2461, 2462, 2463,
     2464, 2465, 2466, 2467, 2469, 2470, 2466, 2471, 2472, 2473,
     2474, 2475, 2476, 2467, 2477, 2478, 2467, 2477, 2480, 2467,
     2467, 2481, 2482, 2483, 2484, 2485, 2486, 2483, 2487, 2488,
     2489, 2478, 2490, 2491, 2492, 2493, 2494, 2495, 2493, 2493,
     2496, 2497, 2498, 2499, 2500, 2488, 2501, 2503, 2505, 2506,
     2507, 2508, 2509, 2510, 2511, 2512, 2513, 2514, 2515, 2516,
     2517, 2518, 2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526,
     2527, 2528, 2529, 2533, 2534, 2535, 2537, 2538, 2539, 2539,
     2540, 2541, 2542, 2538, 2543, 2544, 2545, 2546, 2547, 2548,

     2549, 2550, 2551, 2554, 2555, 2543, 2556, 2561, 2562, 2563,
     2564, 2568, 2570, 2571, 2572, 2573, 2574, 2575, 2576, 2575,
     2575, 2577, 2575, 2575, 2578, 2579, 2580, 2581, 2575, 2582,
     2584, 2583, 2585, 2583, 2586, 2575, 2575, 2583, 2587, 2588,
     2589, 2591, 2593, 2594, 2595, 2596, 2597, 2598, 2599, 2601,
     2602, 2603, 2604, 2605, 2606, 2607, 2608, 2611, 2612, 2613,
     2614, 2615, 2616, 2617, 2618, 2619, 2620, 2621, 2622, 2623,
     2624, 2625, 2626, 2628, 2629, 2630, 2631, 2632, 2633, 2634,
     2635, 2636, 2637, 2638, 2639, 2640, 2641, 2642, 2643, 2644,
     2645, 2646, 2647, 2649, 2650, 2651, 2652, 2653, 2654, 2640,

     2655, 2656, 2657, 2658, 2659, 2660, 2661, 2662, 2663, 2664,
     2665, 2666, 2667, 2668, 2669, 2670, 2671, 2672, 2674, 2675,
     2676, 2677, 2680, 2682, 2683, 2684, 2687, 2689, 2690, 2691,
     2692, 2696, 2698, 2699, 2700, 2703, 2705, 2706, 2707, 2708,
     2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718,
     2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728,
     2729, 2735, 2736, 2738, 2739, 2740, 2741, 2742, 2743, 2744,
     2746, 2747, 2751, 2752, 2753, 2754, 2755, 2756, 2757, 2758,
     2759, 2761, 2762, 2763, 2765, 2767, 2769, 2770, 2771, 2773,
     2774, 2775, 2776, 2777, 2778, 2783, 2785, 2773, 2786, 2787,

     2788, 2790, 2791, 2792, 2793, 2794, 2795, 2796, 2797, 2793,
     2798, 2799, 2800, 2801, 2802, 2803, 2792, 2792, 2804, 2792,
     2805, 2806, 2807, 2808, 2809, 2810, 2811, 2813, 2814, 2815,
     2816, 2817, 2819, 2820, 2821, 2822, 2823, 2826, 2827, 2828,
     2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838,
     2839, 2841, 2842, 2843, 2844, 2845, 2846, 2847, 2848, 2849,
     2850, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859, 2860,
     2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2871,
     2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2880, 2881,
     2882, 2883, 2884, 2885, 2886, 2887, 2888, 2889, 2890, 2891,

     2892, 2893, 2894, 2882, 2895, 2896, 2897, 2898, 2899, 2900,
     2901, 2903, 2904, 2905, 2906, 2907, 2908, 2910, 2913, 2914,
     2916, 2918, 2919, 2920, 2921, 2922, 2926, 2927, 2928, 2930,
     2931, 2932, 2933, 2934, 2935, 2936, 2937, 2938, 2939, 2940,
     2941, 2939, 2942, 2943, 2944, 2945, 2946, 2947, 2948, 2939,
     2950, 2951, 2952, 2939, 2954, 2955, 2939, 2939, 2939, 2956,
     2958, 2959, 2960, 2961, 2962, 2966, 2967, 2968, 2970, 2972,
     2974, 2975, 2976, 2978, 2979, 2980, 2982, 2984, 2985, 2986,
     2987, 2988, 2989, 2990, 2991, 2992, 2993, 2994, 2995, 2996,
     2997, 2998, 2999, 3000, 3001, 3002, 3003, 3004, 3006, 3008,

     3009, 3012, 3013, 3014, 3015, 3016, 3017, 3003, 3018, 3019,
     3020, 3021, 3003, 3022, 3023, 3024, 3025, 3026, 3027, 3028,
     3029, 3032, 3030, 3031, 3033, 3032, 3034, 3035, 3033, 3036,
     3037, 3038, 3027, 3030, 3031, 3039, 3040, 3041, 3042, 3043,
     3044, 3032, 3045, 3047, 3049, 3050, 3051, 3052, 3053, 3054,
     3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064,
     3057, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073,
     3074, 3075, 3076, 3077, 3078, 3079, 3081, 3082, 3083, 3084,
     3068, 3085, 3086, 3087, 3088, 3085, 3089, 3092, 3094, 3095,
     3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105,

     3106, 3107, 3108, 3104, 3109, 3110, 3111, 3112, 3113, 3114,
     3115, 3116, 3117, 3118, 3119, 3120, 3122, 3123, 3124, 3125,
     3126, 3128, 3131, 3134, 3135, 3136, 3137, 3138, 3139, 3140,
     3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150,
     3151, 3152, 3153, 3154, 3155, 3156, 3153, 3157, 3158, 3159,
     3160, 3161, 3162, 3163, 3164, 3165, 3166, 3168, 3169, 3170,
     3171, 3172, 3173, 3175, 3176, 3178, 3179, 3182, 3181, 3183,
     3184, 3164, 3181, 3185, 3186, 3187, 3188, 3190, 3191, 3192,
     3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201, 3202,
     3205, 3206, 3207, 3208, 3210, 3211, 3212, 3213, 3214, 3215,

     3216, 3217, 3218, 3221, 3224, 3225, 3226, 3227, 3228, 3229,
     3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239,
     3240, 3241, 3242, 3243, 3244, 3245, 3247, 3248, 3249, 3250,
     3251, 3252, 3253, 3255, 3256, 3257, 3258, 3259, 3261, 3262,
     3263, 3264, 3256, 3265, 3266, 3267, 3268, 3270, 3271, 3275,
     3278, 3279, 3281, 3283, 3286, 3287, 3288, 3289, 3292, 3293,
     3294, 3295, 3296, 3297, 3298, 3299, 3300, 3301, 3302, 3303,
     3305, 3306, 3307, 3308, 3309, 3310, 3311, 3312, 3313, 3314,
     3315, 3316, 3317, 3318, 3319, 3320, 3321, 3322, 3323, 3324,
     3325, 3326, 3328, 3329, 3330, 3331, 3332, 3333, 3335, 3336,

     3338, 3339, 3340, 3341, 3342, 3343, 3344, 3345, 3346, 3347,
     3348, 3349, 3350, 3351, 3352, 3353, 3354, 3355, 3356, 3357,
     3359, 3360, 3361, 3363, 3364, 3365, 3366, 3367, 3368, 3369,
     3370, 3371, 3372, 3373, 3374, 3375, 3376, 3377, 3378, 3379,
     3380, 3382, 3383, 3384, 3369, 3386, 3387, 3388, 3389, 3391,
     3392, 3393, 3394, 3397, 3398, 3399, 3401, 3403, 3404, 3405,
     3406, 3407, 3408, 3409, 3410, 3411, 3412, 3414, 3416, 3417,
     3418, 3419, 3420, 3404, 3421, 3422, 3424, 3425, 3426, 3427,
     3428, 3429, 3430, 3432, 3434, 3435, 3436, 3438, 3441, 3443,
     3444, 3445, 3446, 3447, 3448, 3449, 3450, 3451, 3452, 3453,

     3454, 3455, 3456, 3459, 3460, 3461, 3462, 3463, 3464, 3465,
     3466, 3467, 3468, 3469, 3470, 3471, 3472, 3473, 3474, 3477,
     3478, 3479, 3480, 3481, 3482, 3466, 3483, 3484, 3485, 3486,
     3487, 3489, 3490, 3493, 3494, 3495, 3496, 3497, 3498, 3499,
     3500, 3501, 3502, 3503, 3504, 3505, 3506, 3508, 3510, 3511,
     3513, 3514, 3515, 3516, 3517, 3518, 3519, 3520, 3521, 3522,
     3523, 3524, 3525, 3528, 3529, 3530, 3531, 3532, 3533, 3537,
     3538, 3540, 3541, 3542, 3543, 3546, 3548, 3549, 3550, 3551,
     3552, 3553, 3554, 3555, 3557, 3558, 3559, 3560, 3561, 3562,
     3563, 3565, 3566, 3567, 3568, 3569, 3570, 3571, 3572, 3573,

     3576, 3577, 3578, 3579, 3580, 3581, 3583, 3584, 3585, 3587,
     3588, 3589, 3590, 3592, 3593, 3594, 3595, 3596, 3597, 3598,
     3599, 3600, 3601, 3602, 3603, 3605, 3606, 3607, 3608, 3610,
     3612, 3615, 3616, 3617, 3620, 3625, 3625, 3625, 3626, 3626,
     3627,  676,  675,  674,  673,  671,  670,  669,  668,  667,
      665,  663,  662,  660,  658,  656,  654,  653,  652,  651,
      650,  649,  648,  647,  646,  644,  643,  642,  640,  638,
      637,  636,  635,  634,  633,  632,  630,  629,  628,  627,
      624,  623,  622,  621,  620,  619,  618,  617,  616,  615,
      614,  612,  611,  610,  609,  608,  607,  603,  602,  601,

      600,  599,  598,  597,  596,  595,  594,  593,  591,  590,
      589,  588,  587,  586,  585,  584,  583,  582,  581,  580,
      579,  578,  577,  576,  575,  574,  573,  572,  571,  570,
      569,  565,  564,  563,  561,  560,  559,  558,  557,  556,
      551,  549,  548,  546,  545,  543,  542,  541,  540,  538,
      537,  536,  535,  534,  533,  532,  531,  530,  528,  527,
      526,  525,  524,  523,  522,  521,  520,  519,  518,  516,
      515,  514,  512,  510,  509,  508,  507,  506,  505,  504,
      501,  499,  498,  497,  494,  493,  492,  491,  490,  489,
      488,  487,  486,  485,  484,  483,  482,  481,  480,  479,

      478,  477,  476,  475,  474,  473,  472,  471,  470,  469,
      467,  466,  464,  463,  461,  460,  459,  458,  457,  456,
      455,  454,  453,  452,  451,  450,  449,  448,  447,  446,
      442,  441,  439,  438,  437,  436,  435,  434,  433,  432,
      430,  429,  428,  427,  426,  424,  423,  422,  421,  420,
      416,  415,  414,  413,  412,  411,  410,  409,  407,  405,
      404,  403,  402,  400,  399,  397,  396,  395,  394,  393,
      392,  389,  388,  386,  385,  384,  383,  382,  381,  380,
      379,  377,  374,  371,  370,  368,  367,  366,  365,  364,
      363,  362,  361,  360,  357,  356,  355,  354,  353,  352,

      351,  350,  349,  348,  347,  346,  345,  344,  343,  342,
      341,  340,  339,  338,  337,  336,  334,  333,  332,  331,
      330,  328,  327,  326,  325,  324,  323,  322,  321,  320,
      319,  318,  317,  315,  314,  313,  312,  311,  310,  309,
      308,  307,  306,  305,  304,  303,  302,  301,  300,  299,
      296,  295,  294,  293,  292,  291,  289,  288,  287,  286,
      285,  284,  283,  282,  281,  280,  279,  278,  277,  276,
      275,  274,  273,  272,  265,  264,  263,  262,  261,  260,
      259,  258,  257,  256,  255,  254,  253,  252,  251,  250,
      249,  248,  247,  246,  245,  244,  242,  241,  240,  238,

      237,  236,  235,  234,  233,  232,  231,  230,  229,  227,
      226,  225,  224,  223,  222,  221,  220,  219,  218,  217,
      216,  215,  214,  213,  212,  211,  210,  209,  208,  207,
      206,  205,  203,  202,  201,  200,  199,  198,  197,  196,
      195,  194,  193,  192,  190,  189,  188,  187,  186,  185,
      184,  183,  182,  181,  180,  179,  169,  168,  167,  166,
      164,  163,  162,  160,  159,  158,  157,  153,  152,  151,
      150,  148,  147,  146,  145,  144,  143,  141,  140,  138,
      136,  135,  134,  133,  132,  131,  129,  128,  126,  124,
      123,  122,  121,  119,  117,  116,  115,  114,  112,  110,

      109,  108,  107,  105,  104,  103,  102,  101,  100,   99,
       98,   97,   96,   75,   69,   67,   66,   62,   61,   59,
       58,   56,   55,   53,   48,   44,   43,   38,   37,   36,
       34,   33,   32,   31,   24,   13,   10,    9,    7,    3,
     3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624,
     3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624,
     3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624,
     3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624,
     3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624,
     3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624,

     3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624,
     3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624,
     3624, 3624, 3624, 3624, 3624, 3624, 3624
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
#define INITIAL 0
#line 12 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
#include "linden_common.h"
// Deal with the fact that lex/yacc generates unreachable code
#ifdef LL_WINDOWS
#pragma warning (disable : 4018) // warning C4018: signed/unsigned mismatch
#pragma warning (disable : 4702) // warning C4702: unreachable code
#endif	//	LL_WINDOWS
#include "llmath.h"
#include "lscript_tree.h"
#include "lscript_typecheck.h"
#include "lscript_resource.h"
#include "indra.y.hpp"
#include "lltimer.h"
#include "indra_constants.h"
#include "llagentconstants.h"
#include "lllslconstants.h"
#include "lluuid.h"
#include "llassetstorage.h"
#include "llpartdata.h"
#include "llvehicleparams.h"
#include "llpermissionsflags.h"
#include "llfollowcamparams.h"
#include "llparcelflags.h"
#include "llregionflags.h"
#include "lscript_http.h"
#include "llclickaction.h"

void count();
void comment();
void parse_string();

#define YYLMAX 16384
#define YY_NEVER_INTERACTIVE 1 /* stops flex from calling isatty() */
#ifdef LL_WINDOWS
#define isatty(x) 0 /* hack for bug in cygwin flex 2.5.35 */
#endif

#ifdef ECHO
#undef ECHO
#endif

#define ECHO do { } while (0)

#if defined(__cplusplus)
extern "C" { int yylex( void ); }
extern "C" { int yyparse( void ); }
extern "C" { int yyerror(const char *fmt, ...); }
#endif

#line 2464 "/home/gareth/slbrowser/linden/indra/viewer-linux-i686/lscript/lscript_compile/indra.l.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 62 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"

#line 2617 "/home/gareth/slbrowser/linden/indra/viewer-linux-i686/lscript/lscript_compile/indra.l.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 3625 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3741 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 63 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ gInternalLine++; gInternalColumn = 0; comment(); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 65 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(INTEGER); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 66 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(FLOAT_TYPE); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 67 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(STRING); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 68 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(LLKEY); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 69 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(VECTOR); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 70 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(QUATERNION); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 71 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(QUATERNION); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 72 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(LIST); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 74 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.sval = new char[strlen(yytext) + 1]; strcpy(yylval.sval, yytext); return(STATE_DEFAULT); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 75 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(STATE); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 76 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(EVENT); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 77 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(JUMP); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 78 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(RETURN); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 79 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(IF); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 80 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(ELSE); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 81 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(FOR); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 82 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(DO); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 83 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(WHILE); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 85 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(STATE_ENTRY); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 86 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(STATE_EXIT); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 87 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(TOUCH_START); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 88 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(TOUCH); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 89 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(TOUCH_END); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 90 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(COLLISION_START); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 91 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(COLLISION); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 92 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(COLLISION_END); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 93 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(LAND_COLLISION_START); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 94 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(LAND_COLLISION); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 95 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(LAND_COLLISION_END); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 96 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(TIMER); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 97 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(CHAT); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 98 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(SENSOR); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 99 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(NO_SENSOR); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 100 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(CONTROL); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 101 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(PRINT); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 102 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(AT_TARGET); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 103 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(NOT_AT_TARGET); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 104 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(AT_ROT_TARGET); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 105 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(NOT_AT_ROT_TARGET); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 106 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(MONEY); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 107 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(EMAIL); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 108 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(RUN_TIME_PERMISSIONS); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 109 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(INVENTORY); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 110 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(ATTACH); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 111 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(DATASERVER); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 112 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(MOVING_START); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 113 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(MOVING_END); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 114 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(LINK_MESSAGE); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 115 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(REZ); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 116 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(OBJECT_REZ); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 117 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(REMOTE_DATA); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 118 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(HTTP_RESPONSE); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 119 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(PERIOD); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 122 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = strtoul(yytext, NULL, 0);  return(INTEGER_CONSTANT); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 123 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = strtoul(yytext, NULL, 10); return(INTEGER_CONSTANT); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 124 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 1; return(INTEGER_TRUE); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 125 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0; return(INTEGER_FALSE); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 126 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x1; return(INTEGER_CONSTANT); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 127 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x2; return(INTEGER_CONSTANT); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 128 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x4; return(INTEGER_CONSTANT); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 129 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x8; return(INTEGER_CONSTANT); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 130 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x10; return(INTEGER_CONSTANT); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 131 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x20; return(INTEGER_CONSTANT); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 132 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x40; return(INTEGER_CONSTANT); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 133 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x80; return(INTEGER_CONSTANT); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 134 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x100; return(INTEGER_CONSTANT); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 135 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x200; return(INTEGER_CONSTANT); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 137 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_FLYING; return(INTEGER_CONSTANT); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 138 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_ATTACHMENTS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 139 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_SCRIPTED; return(INTEGER_CONSTANT); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 140 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_MOUSELOOK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 141 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_SITTING; return(INTEGER_CONSTANT); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 142 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_ON_OBJECT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 143 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_AWAY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 144 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_WALKING; return(INTEGER_CONSTANT); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 145 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_IN_AIR; return(INTEGER_CONSTANT); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 146 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_TYPING; return(INTEGER_CONSTANT); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 147 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_CROUCHING; return(INTEGER_CONSTANT); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 148 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_BUSY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 149 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_ALWAYS_RUN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 151 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = FOLLOWCAM_PITCH; return(INTEGER_CONSTANT); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 152 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = FOLLOWCAM_FOCUS_OFFSET; return (INTEGER_CONSTANT); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 153 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = FOLLOWCAM_POSITION_LAG; return (INTEGER_CONSTANT); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 154 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = FOLLOWCAM_FOCUS_LAG; return (INTEGER_CONSTANT); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 155 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = FOLLOWCAM_DISTANCE; return (INTEGER_CONSTANT); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 156 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = FOLLOWCAM_BEHINDNESS_ANGLE; return (INTEGER_CONSTANT); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 157 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = FOLLOWCAM_BEHINDNESS_LAG; return (INTEGER_CONSTANT); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 158 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = FOLLOWCAM_POSITION_THRESHOLD; return (INTEGER_CONSTANT); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 159 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = FOLLOWCAM_FOCUS_THRESHOLD; return (INTEGER_CONSTANT); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 160 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = FOLLOWCAM_ACTIVE; return (INTEGER_CONSTANT); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 161 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = FOLLOWCAM_POSITION; return (INTEGER_CONSTANT); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 162 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = FOLLOWCAM_FOCUS; return (INTEGER_CONSTANT); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 163 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = FOLLOWCAM_POSITION_LOCKED; return (INTEGER_CONSTANT); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 164 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = FOLLOWCAM_FOCUS_LOCKED; return (INTEGER_CONSTANT); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 166 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x1; return(INTEGER_CONSTANT); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 167 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x2; return(INTEGER_CONSTANT); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 168 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x4; return(INTEGER_CONSTANT); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 169 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x8; return(INTEGER_CONSTANT); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 170 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x10; return(INTEGER_CONSTANT); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 171 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x20; return(INTEGER_CONSTANT); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 172 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x40; return(INTEGER_CONSTANT); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 174 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_ALL_SIDES; return(INTEGER_CONSTANT); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 175 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_LINK_ROOT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 176 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_LINK_SET; return(INTEGER_CONSTANT); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 177 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_LINK_ALL_OTHERS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 178 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_LINK_ALL_CHILDREN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 179 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_LINK_THIS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 181 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x1; return(INTEGER_CONSTANT); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 182 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x2; return(INTEGER_CONSTANT); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 183 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x4; return(INTEGER_CONSTANT); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 184 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x8; return(INTEGER_CONSTANT); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 186 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_CONTROL_AT_POS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 187 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_CONTROL_AT_NEG; return(INTEGER_CONSTANT); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 188 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_CONTROL_LEFT_POS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 189 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_CONTROL_LEFT_NEG; return(INTEGER_CONSTANT); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 190 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_CONTROL_YAW_POS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 191 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_CONTROL_YAW_NEG; return(INTEGER_CONSTANT); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 192 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_CONTROL_UP_POS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 193 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_CONTROL_UP_NEG; return(INTEGER_CONSTANT); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 194 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_CONTROL_LBUTTON_DOWN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 195 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_CONTROL_ML_LBUTTON_DOWN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 197 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_DEBIT]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 198 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_TAKE_CONTROLS]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 199 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_REMAP_CONTROLS]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 200 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_TRIGGER_ANIMATION]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 201 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_ATTACH]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 202 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_RELEASE_OWNERSHIP]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 203 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_CHANGE_LINKS]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 204 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_CHANGE_JOINTS]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 205 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_CHANGE_PERMISSIONS]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 206 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_TRACK_CAMERA]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 207 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_CONTROL_CAMERA]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 209 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLAssetType::AT_TEXTURE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 210 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLAssetType::AT_SOUND; return(INTEGER_CONSTANT); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 211 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLAssetType::AT_OBJECT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 212 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLAssetType::AT_LSL_TEXT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 213 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLAssetType::AT_LANDMARK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 214 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLAssetType::AT_CLOTHING; return(INTEGER_CONSTANT); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 215 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLAssetType::AT_NOTECARD; return(INTEGER_CONSTANT); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 216 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLAssetType::AT_BODYPART; return(INTEGER_CONSTANT); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 217 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLAssetType::AT_ANIMATION; return(INTEGER_CONSTANT); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 218 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLAssetType::AT_GESTURE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 219 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLAssetType::AT_NONE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 220 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLAssetType::AT_NONE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 222 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x1; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 223 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x2; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 224 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x4; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 225 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x8; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 226 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x10; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 227 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x20; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 228 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x40; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 229 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x80; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 230 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x100; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 231 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x200; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 233 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OBJECT_UNKNOWN_DETAIL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 234 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OBJECT_NAME; return(INTEGER_CONSTANT); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 235 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OBJECT_DESC; return(INTEGER_CONSTANT); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 236 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OBJECT_POS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 237 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OBJECT_ROT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 238 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OBJECT_VELOCITY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 239 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OBJECT_OWNER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 240 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OBJECT_GROUP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 241 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OBJECT_CREATOR; return(INTEGER_CONSTANT); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 243 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LST_INTEGER; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 244 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LST_FLOATINGPOINT; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 245 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LST_STRING; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 246 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LST_KEY; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 247 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LST_VECTOR; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 248 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LST_QUATERNION; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 249 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LST_NULL; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 251 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ yylval.sval = new char[UUID_STR_LENGTH]; strcpy(yylval.sval, "00000000-0000-0000-0000-000000000000"); return(STRING_CONSTANT); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 252 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ yylval.sval = new char[UUID_STR_LENGTH]; strcpy(yylval.sval, "\n\n\n"); return(STRING_CONSTANT); }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 254 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.fval = F_PI; return(FP_CONSTANT); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 255 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.fval = F_TWO_PI; return(FP_CONSTANT); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 256 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.fval = F_PI_BY_TWO; return(FP_CONSTANT); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 257 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.fval = DEG_TO_RAD; return(FP_CONSTANT); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 258 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.fval = RAD_TO_DEG; return(FP_CONSTANT); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 259 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.fval = F_SQRT2; return(FP_CONSTANT); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 261 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CHAT_CHANNEL_DEBUG; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 262 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 264 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(ZERO_VECTOR); }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 265 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(ZERO_ROTATION); }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 267 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 1; return(INTEGER_CONSTANT); }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 268 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 2; return(INTEGER_CONSTANT); }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 269 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 3; return(INTEGER_CONSTANT); }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 270 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 4; return(INTEGER_CONSTANT); }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 271 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 5; return(INTEGER_CONSTANT); }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 272 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 6; return(INTEGER_CONSTANT); }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 273 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 7; return(INTEGER_CONSTANT); }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 274 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 8; return(INTEGER_CONSTANT); }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 275 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 9; return(INTEGER_CONSTANT); }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 276 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 10; return(INTEGER_CONSTANT); }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 277 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 11; return(INTEGER_CONSTANT); }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 278 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 12; return(INTEGER_CONSTANT); }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 279 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 13; return(INTEGER_CONSTANT); }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 280 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 14; return(INTEGER_CONSTANT); }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 281 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 15; return(INTEGER_CONSTANT); }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 282 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 16; return(INTEGER_CONSTANT); }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 283 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 17; return(INTEGER_CONSTANT); }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 284 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 18; return(INTEGER_CONSTANT); }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 285 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 19; return(INTEGER_CONSTANT); }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 286 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 20; return(INTEGER_CONSTANT); }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 287 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 21; return(INTEGER_CONSTANT); }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 288 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 22; return(INTEGER_CONSTANT); }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 289 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 23; return(INTEGER_CONSTANT); }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 290 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 24; return(INTEGER_CONSTANT); }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 291 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 25; return(INTEGER_CONSTANT); }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 292 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 26; return(INTEGER_CONSTANT); }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 293 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 27; return(INTEGER_CONSTANT); }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 294 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 28; return(INTEGER_CONSTANT); }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 295 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 29; return(INTEGER_CONSTANT); }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 296 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 30; return(INTEGER_CONSTANT); }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 297 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 31; return(INTEGER_CONSTANT); }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 298 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 32; return(INTEGER_CONSTANT); }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 299 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 33; return(INTEGER_CONSTANT); }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 300 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 34; return(INTEGER_CONSTANT); }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 301 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 35; return(INTEGER_CONSTANT); }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 302 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 36; return(INTEGER_CONSTANT); }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 303 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 37; return(INTEGER_CONSTANT); }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 304 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 38; return(INTEGER_CONSTANT); }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 306 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = E_LANDBRUSH_LEVEL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 307 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = E_LANDBRUSH_RAISE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 308 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = E_LANDBRUSH_LOWER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 309 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = E_LANDBRUSH_SMOOTH; return(INTEGER_CONSTANT); }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 310 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = E_LANDBRUSH_NOISE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 311 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = E_LANDBRUSH_REVERT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 313 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 1; return(INTEGER_CONSTANT); }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 314 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 2; return(INTEGER_CONSTANT); }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 315 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 3; return(INTEGER_CONSTANT); }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 317 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 1; return(INTEGER_CONSTANT); }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 318 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 2; return(INTEGER_CONSTANT); }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 319 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 3; return(INTEGER_CONSTANT); }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 320 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 4; return(INTEGER_CONSTANT); }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 321 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 5; return(INTEGER_CONSTANT); }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 322 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 6; return(INTEGER_CONSTANT); }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 323 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 7; return(INTEGER_CONSTANT); }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 324 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 8; return(INTEGER_CONSTANT); }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 326 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 1; return(INTEGER_CONSTANT); }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 327 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 2; return(INTEGER_CONSTANT); }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 329 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_REMOTE_DATA_CHANNEL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 330 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_REMOTE_DATA_REQUEST; return(INTEGER_CONSTANT); }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 331 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_REMOTE_DATA_REPLY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 334 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_PART_FLAGS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 335 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_PART_START_COLOR; return (INTEGER_CONSTANT); }
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 336 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_PART_START_ALPHA; return (INTEGER_CONSTANT); }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 337 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_PART_START_SCALE; return (INTEGER_CONSTANT); }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 338 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_PART_END_COLOR; return (INTEGER_CONSTANT); }
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 339 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_PART_END_ALPHA; return (INTEGER_CONSTANT); }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 340 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_PART_END_SCALE; return (INTEGER_CONSTANT); }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 341 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_PART_MAX_AGE; return (INTEGER_CONSTANT); }
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 344 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartData::LL_PART_WIND_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 345 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartData::LL_PART_INTERP_COLOR_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 346 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartData::LL_PART_INTERP_SCALE_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 347 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartData::LL_PART_BOUNCE_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 348 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartData::LL_PART_FOLLOW_SRC_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 349 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartData::LL_PART_FOLLOW_VELOCITY_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 350 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartData::LL_PART_TARGET_POS_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 351 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartData::LL_PART_EMISSIVE_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 352 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartData::LL_PART_TARGET_LINEAR_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 355 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_MAX_AGE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 356 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_PATTERN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 357 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_INNERANGLE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 358 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_OUTERANGLE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 359 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_ANGLE_BEGIN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 360 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_ANGLE_END; return(INTEGER_CONSTANT); }
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 361 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_BURST_RATE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 362 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_BURST_PART_COUNT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 363 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_BURST_RADIUS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 364 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_BURST_SPEED_MIN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 365 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_BURST_SPEED_MAX; return(INTEGER_CONSTANT); }
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 366 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_ACCEL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 367 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_TEXTURE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 368 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_TARGET_UUID; return(INTEGER_CONSTANT); }
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 369 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_OMEGA; return(INTEGER_CONSTANT); }
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 371 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartSysData::LL_PART_SRC_OBJ_REL_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 373 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartSysData::LL_PART_SRC_PATTERN_DROP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 374 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartSysData::LL_PART_SRC_PATTERN_EXPLODE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 375 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartSysData::LL_PART_SRC_PATTERN_ANGLE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 376 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartSysData::LL_PART_SRC_PATTERN_ANGLE_CONE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 377 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartSysData::LL_PART_SRC_PATTERN_ANGLE_CONE_EMPTY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 380 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_TYPE_NONE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 381 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_TYPE_SLED; return(INTEGER_CONSTANT); }
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 382 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_TYPE_CAR; return(INTEGER_CONSTANT); }
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 383 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_TYPE_BOAT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 384 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_TYPE_AIRPLANE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 385 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_TYPE_BALLOON; return(INTEGER_CONSTANT); }
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 387 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_REFERENCE_FRAME; return(INTEGER_CONSTANT); }
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 388 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_LINEAR_FRICTION_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 389 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_ANGULAR_FRICTION_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 390 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_LINEAR_MOTOR_DIRECTION; return(INTEGER_CONSTANT); }
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 391 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_ANGULAR_MOTOR_DIRECTION; return(INTEGER_CONSTANT); }
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 392 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_LINEAR_MOTOR_OFFSET; return(INTEGER_CONSTANT); }
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 396 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_HOVER_HEIGHT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 397 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_HOVER_EFFICIENCY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 398 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_HOVER_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 399 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_BUOYANCY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 401 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_LINEAR_DEFLECTION_EFFICIENCY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 402 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_LINEAR_DEFLECTION_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 403 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_LINEAR_MOTOR_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 404 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_LINEAR_MOTOR_DECAY_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 406 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_ANGULAR_DEFLECTION_EFFICIENCY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 407 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_ANGULAR_DEFLECTION_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 408 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_ANGULAR_MOTOR_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 409 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_ANGULAR_MOTOR_DECAY_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 411 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_VERTICAL_ATTRACTION_EFFICIENCY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 412 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_VERTICAL_ATTRACTION_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 414 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_BANKING_EFFICIENCY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 415 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_BANKING_MIX; return(INTEGER_CONSTANT); }
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 416 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_BANKING_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 418 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_NO_DEFLECTION_UP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 419 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_NO_DEFLECTION_UP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 420 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_LIMIT_ROLL_ONLY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 421 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_HOVER_WATER_ONLY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 422 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_HOVER_TERRAIN_ONLY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 423 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_HOVER_GLOBAL_HEIGHT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 424 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_HOVER_UP_ONLY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 425 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_LIMIT_MOTOR_UP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 426 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_MOUSELOOK_STEER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 427 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_MOUSELOOK_BANK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 428 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_CAMERA_DECOUPLED; return(INTEGER_CONSTANT); }
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 432 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_TYPE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 433 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_MATERIAL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 434 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_PHYSICS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 435 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_FLEXIBLE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 436 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_POINT_LIGHT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 437 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_TEMP_ON_REZ; return(INTEGER_CONSTANT); }
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 438 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_PHANTOM; return(INTEGER_CONSTANT); }
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 439 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_CAST_SHADOWS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 440 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_POSITION; return(INTEGER_CONSTANT); }
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 441 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_SIZE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 442 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_ROTATION; return(INTEGER_CONSTANT); }
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 443 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_TEXTURE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 444 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_COLOR; return(INTEGER_CONSTANT); }
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 445 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_SHINY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 446 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_FULLBRIGHT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 447 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_TEXGEN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 448 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_GLOW; return(INTEGER_CONSTANT); }
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 450 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_TYPE_BOX; return(INTEGER_CONSTANT); }
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 451 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_TYPE_CYLINDER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 452 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_TYPE_PRISM; return(INTEGER_CONSTANT); }
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 453 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_TYPE_SPHERE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 454 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_TYPE_TORUS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 455 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_TYPE_TUBE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 456 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_TYPE_RING; return(INTEGER_CONSTANT); }
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 457 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_TYPE_SCULPT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 459 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_HOLE_DEFAULT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 460 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_HOLE_CIRCLE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 461 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_HOLE_SQUARE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 462 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_HOLE_TRIANGLE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 464 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_MATERIAL_STONE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 465 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_MATERIAL_METAL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 466 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_MATERIAL_GLASS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 467 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_MATERIAL_WOOD; return(INTEGER_CONSTANT); }
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 468 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_MATERIAL_FLESH; return(INTEGER_CONSTANT); }
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 469 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_MATERIAL_PLASTIC; return(INTEGER_CONSTANT); }
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 470 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_MATERIAL_RUBBER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 471 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_MATERIAL_LIGHT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 473 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_SHINY_NONE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 474 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_SHINY_LOW; return(INTEGER_CONSTANT); }
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 475 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_SHINY_MEDIUM; return(INTEGER_CONSTANT); }
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 476 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_SHINY_HIGH; return(INTEGER_CONSTANT); }
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 478 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_NONE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 479 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_BRIGHT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 480 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_DARK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 481 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_WOOD; return(INTEGER_CONSTANT); }
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 482 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_BARK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 483 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_BRICKS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 484 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_CHECKER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 485 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_CONCRETE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 486 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_TILE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 487 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_STONE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 488 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_DISKS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 489 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_GRAVEL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 490 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_BLOBS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 491 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_SIDING; return(INTEGER_CONSTANT); }
	YY_BREAK
case 377:
YY_RULE_SETUP
#line 492 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_LARGETILE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 493 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_STUCCO; return(INTEGER_CONSTANT); }
	YY_BREAK
case 379:
YY_RULE_SETUP
#line 494 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_SUCTION; return(INTEGER_CONSTANT); }
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 495 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_WEAVE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 381:
YY_RULE_SETUP
#line 497 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_TEXGEN_DEFAULT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 382:
YY_RULE_SETUP
#line 498 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_TEXGEN_PLANAR; return(INTEGER_CONSTANT); }
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 500 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_SCULPT_TYPE_SPHERE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 501 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_SCULPT_TYPE_TORUS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 385:
YY_RULE_SETUP
#line 502 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_SCULPT_TYPE_PLANE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 503 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_SCULPT_TYPE_CYLINDER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 504 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_SCULPT_TYPE_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 388:
YY_RULE_SETUP
#line 505 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_SCULPT_FLAG_MIRROR; return(INTEGER_CONSTANT); }
	YY_BREAK
case 389:
YY_RULE_SETUP
#line 506 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_SCULPT_FLAG_INVERT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 390:
YY_RULE_SETUP
#line 508 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0; return(INTEGER_CONSTANT); }
	YY_BREAK
case 391:
YY_RULE_SETUP
#line 509 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 1; return(INTEGER_CONSTANT); }
	YY_BREAK
case 392:
YY_RULE_SETUP
#line 510 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 2; return(INTEGER_CONSTANT); }
	YY_BREAK
case 393:
YY_RULE_SETUP
#line 511 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 3; return(INTEGER_CONSTANT); }
	YY_BREAK
case 394:
YY_RULE_SETUP
#line 512 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 4; return(INTEGER_CONSTANT); }
	YY_BREAK
case 395:
YY_RULE_SETUP
#line 514 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PERM_TRANSFER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 396:
YY_RULE_SETUP
#line 515 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PERM_MODIFY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 397:
YY_RULE_SETUP
#line 516 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PERM_COPY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 398:
YY_RULE_SETUP
#line 517 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PERM_MOVE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 399:
YY_RULE_SETUP
#line 518 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PERM_ALL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 400:
YY_RULE_SETUP
#line 520 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_STOP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 401:
YY_RULE_SETUP
#line 521 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_PAUSE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 402:
YY_RULE_SETUP
#line 522 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_PLAY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 403:
YY_RULE_SETUP
#line 523 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_LOOP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 404:
YY_RULE_SETUP
#line 524 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_TEXTURE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 405:
YY_RULE_SETUP
#line 525 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_URL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 406:
YY_RULE_SETUP
#line 526 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_TIME; return(INTEGER_CONSTANT); }
	YY_BREAK
case 407:
YY_RULE_SETUP
#line 527 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_AGENT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 408:
YY_RULE_SETUP
#line 528 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_UNLOAD; return(INTEGER_CONSTANT); }
	YY_BREAK
case 409:
YY_RULE_SETUP
#line 529 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_AUTO_ALIGN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 410:
YY_RULE_SETUP
#line 530 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_TYPE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 411:
YY_RULE_SETUP
#line 531 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_SIZE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 412:
YY_RULE_SETUP
#line 532 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_DESC; return(INTEGER_CONSTANT); }
	YY_BREAK
case 413:
YY_RULE_SETUP
#line 533 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_LOOP_SET; return(INTEGER_CONSTANT); }
	YY_BREAK
case 414:
YY_RULE_SETUP
#line 535 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LIST_STAT_MAX; return(INTEGER_CONSTANT); }
	YY_BREAK
case 415:
YY_RULE_SETUP
#line 536 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LIST_STAT_MIN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 416:
YY_RULE_SETUP
#line 537 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LIST_STAT_MEAN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 417:
YY_RULE_SETUP
#line 538 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LIST_STAT_MEDIAN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 418:
YY_RULE_SETUP
#line 539 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LIST_STAT_STD_DEV; return(INTEGER_CONSTANT); }
	YY_BREAK
case 419:
YY_RULE_SETUP
#line 540 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LIST_STAT_SUM; return(INTEGER_CONSTANT); }
	YY_BREAK
case 420:
YY_RULE_SETUP
#line 541 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LIST_STAT_SUM_SQUARES; return(INTEGER_CONSTANT); }
	YY_BREAK
case 421:
YY_RULE_SETUP
#line 542 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LIST_STAT_NUM_COUNT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 422:
YY_RULE_SETUP
#line 543 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LIST_STAT_GEO_MEAN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 423:
YY_RULE_SETUP
#line 544 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LIST_STAT_RANGE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 424:
YY_RULE_SETUP
#line 546 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PAY_PRICE_HIDE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 425:
YY_RULE_SETUP
#line 547 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PAY_PRICE_DEFAULT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 426:
YY_RULE_SETUP
#line 549 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_ALLOW_FLY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 427:
YY_RULE_SETUP
#line 550 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_ALLOW_GROUP_SCRIPTS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 428:
YY_RULE_SETUP
#line 551 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_ALLOW_OTHER_SCRIPTS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 429:
YY_RULE_SETUP
#line 552 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_ALLOW_LANDMARK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 430:
YY_RULE_SETUP
#line 553 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_ALLOW_TERRAFORM; return(INTEGER_CONSTANT); }
	YY_BREAK
case 431:
YY_RULE_SETUP
#line 554 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_ALLOW_DAMAGE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 432:
YY_RULE_SETUP
#line 555 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_CREATE_OBJECTS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 433:
YY_RULE_SETUP
#line 556 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_CREATE_GROUP_OBJECTS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 434:
YY_RULE_SETUP
#line 557 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_USE_ACCESS_GROUP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 435:
YY_RULE_SETUP
#line 558 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_USE_ACCESS_LIST; return(INTEGER_CONSTANT); }
	YY_BREAK
case 436:
YY_RULE_SETUP
#line 559 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_USE_BAN_LIST; return(INTEGER_CONSTANT); }
	YY_BREAK
case 437:
YY_RULE_SETUP
#line 560 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_USE_PASS_LIST; return(INTEGER_CONSTANT); }
	YY_BREAK
case 438:
YY_RULE_SETUP
#line 561 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_SOUND_LOCAL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 439:
YY_RULE_SETUP
#line 562 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_RESTRICT_PUSHOBJECT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 440:
YY_RULE_SETUP
#line 563 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_ALLOW_GROUP_OBJECT_ENTRY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 441:
YY_RULE_SETUP
#line 564 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_ALLOW_ALL_OBJECT_ENTRY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 442:
YY_RULE_SETUP
#line 566 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = REGION_FLAGS_ALLOW_DAMAGE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 443:
YY_RULE_SETUP
#line 567 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = REGION_FLAGS_SUN_FIXED; return(INTEGER_CONSTANT); }
	YY_BREAK
case 444:
YY_RULE_SETUP
#line 568 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = REGION_FLAGS_BLOCK_TERRAFORM; return(INTEGER_CONSTANT); }
	YY_BREAK
case 445:
YY_RULE_SETUP
#line 569 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = REGION_FLAGS_SANDBOX; return(INTEGER_CONSTANT); }
	YY_BREAK
case 446:
YY_RULE_SETUP
#line 570 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = REGION_FLAGS_SKIP_COLLISIONS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 447:
YY_RULE_SETUP
#line 571 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = REGION_FLAGS_SKIP_PHYSICS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 448:
YY_RULE_SETUP
#line 572 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = REGION_FLAGS_BLOCK_FLY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 449:
YY_RULE_SETUP
#line 573 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = REGION_FLAGS_ALLOW_DIRECT_TELEPORT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 450:
YY_RULE_SETUP
#line 574 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = REGION_FLAGS_RESTRICT_PUSHOBJECT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 451:
YY_RULE_SETUP
#line 576 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = HTTP_METHOD; return(INTEGER_CONSTANT); }
	YY_BREAK
case 452:
YY_RULE_SETUP
#line 577 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = HTTP_MIMETYPE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 453:
YY_RULE_SETUP
#line 578 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = HTTP_BODY_MAXLENGTH; return(INTEGER_CONSTANT); }
	YY_BREAK
case 454:
YY_RULE_SETUP
#line 579 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = HTTP_BODY_TRUNCATED; return(INTEGER_CONSTANT); }
	YY_BREAK
case 455:
YY_RULE_SETUP
#line 580 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = HTTP_VERIFY_CERT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 456:
YY_RULE_SETUP
#line 582 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OC_TOTAL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 457:
YY_RULE_SETUP
#line 583 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OC_OWNER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 458:
YY_RULE_SETUP
#line 584 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OC_GROUP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 459:
YY_RULE_SETUP
#line 585 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OC_OTHER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 460:
YY_RULE_SETUP
#line 586 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OC_SELECTED; return(INTEGER_CONSTANT); }
	YY_BREAK
case 461:
YY_RULE_SETUP
#line 587 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OC_TEMP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 462:
YY_RULE_SETUP
#line 589 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_DETAILS_NAME; return(INTEGER_CONSTANT); }
	YY_BREAK
case 463:
YY_RULE_SETUP
#line 590 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_DETAILS_DESC; return(INTEGER_CONSTANT); }
	YY_BREAK
case 464:
YY_RULE_SETUP
#line 591 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_DETAILS_OWNER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 465:
YY_RULE_SETUP
#line 592 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_DETAILS_GROUP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 466:
YY_RULE_SETUP
#line 593 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_DETAILS_AREA; return(INTEGER_CONSTANT); }
	YY_BREAK
case 467:
YY_RULE_SETUP
#line 595 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = STRING_TRIM_HEAD; return(INTEGER_CONSTANT); }
	YY_BREAK
case 468:
YY_RULE_SETUP
#line 596 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = STRING_TRIM_TAIL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 469:
YY_RULE_SETUP
#line 597 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = STRING_TRIM; return(INTEGER_CONSTANT); }
	YY_BREAK
case 470:
YY_RULE_SETUP
#line 599 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CLICK_ACTION_NONE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 471:
YY_RULE_SETUP
#line 600 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CLICK_ACTION_TOUCH; return(INTEGER_CONSTANT); }
	YY_BREAK
case 472:
YY_RULE_SETUP
#line 601 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CLICK_ACTION_SIT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 473:
YY_RULE_SETUP
#line 602 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CLICK_ACTION_BUY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 474:
YY_RULE_SETUP
#line 603 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CLICK_ACTION_PAY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 475:
YY_RULE_SETUP
#line 604 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CLICK_ACTION_OPEN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 476:
YY_RULE_SETUP
#line 605 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CLICK_ACTION_PLAY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 477:
YY_RULE_SETUP
#line 606 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CLICK_ACTION_OPEN_MEDIA; return(INTEGER_CONSTANT); }
	YY_BREAK
case 478:
YY_RULE_SETUP
#line 608 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ yylval.sval = new char[UUID_STR_LENGTH]; strcpy(yylval.sval, "5748decc-f629-461c-9a36-a35a221fe21f"); return(STRING_CONSTANT); }
	YY_BREAK
case 479:
YY_RULE_SETUP
#line 609 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ yylval.sval = new char[UUID_STR_LENGTH]; strcpy(yylval.sval, "89556747-24cb-43ed-920b-47caed15465f"); return(STRING_CONSTANT); }
	YY_BREAK
case 480:
YY_RULE_SETUP
#line 610 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ yylval.sval = new char[UUID_STR_LENGTH]; strcpy(yylval.sval, "8b5fec65-8d8d-9dc5-cda8-8fdf2716e361"); return(STRING_CONSTANT); }
	YY_BREAK
case 481:
YY_RULE_SETUP
#line 611 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ yylval.sval = new char[UUID_STR_LENGTH]; strcpy(yylval.sval, "89556747-24cb-43ed-920b-47caed15465f"); return(STRING_CONSTANT); }
	YY_BREAK
case 482:
YY_RULE_SETUP
#line 612 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ yylval.sval = new char[UUID_STR_LENGTH]; strcpy(yylval.sval, "8dcd4a48-2d37-4909-9f78-f7a9eb4ef903"); return(STRING_CONSTANT); }
	YY_BREAK
case 483:
YY_RULE_SETUP
#line 614 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.sval = new char[strlen(yytext) + 1]; strcpy(yylval.sval, yytext); return(IDENTIFIER); }
	YY_BREAK
case 484:
YY_RULE_SETUP
#line 616 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.fval = (F32)atof(yytext); return(FP_CONSTANT); }
	YY_BREAK
case 485:
YY_RULE_SETUP
#line 617 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.fval = (F32)atof(yytext); return(FP_CONSTANT); }
	YY_BREAK
case 486:
YY_RULE_SETUP
#line 618 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.fval = (F32)atof(yytext); return(FP_CONSTANT); }
	YY_BREAK
case 487:
YY_RULE_SETUP
#line 620 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ parse_string(); count(); return(STRING_CONSTANT); }
	YY_BREAK
case 488:
YY_RULE_SETUP
#line 622 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(INC_OP); }
	YY_BREAK
case 489:
YY_RULE_SETUP
#line 623 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(DEC_OP); }
	YY_BREAK
case 490:
YY_RULE_SETUP
#line 624 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(ADD_ASSIGN); }
	YY_BREAK
case 491:
YY_RULE_SETUP
#line 625 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(SUB_ASSIGN); }
	YY_BREAK
case 492:
YY_RULE_SETUP
#line 626 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(MUL_ASSIGN); }
	YY_BREAK
case 493:
YY_RULE_SETUP
#line 627 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(DIV_ASSIGN); }
	YY_BREAK
case 494:
YY_RULE_SETUP
#line 628 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(MOD_ASSIGN); }
	YY_BREAK
case 495:
YY_RULE_SETUP
#line 629 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(';'); }
	YY_BREAK
case 496:
YY_RULE_SETUP
#line 630 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return('{'); }
	YY_BREAK
case 497:
YY_RULE_SETUP
#line 631 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return('}'); }
	YY_BREAK
case 498:
YY_RULE_SETUP
#line 632 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(','); }
	YY_BREAK
case 499:
YY_RULE_SETUP
#line 633 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return('='); }
	YY_BREAK
case 500:
YY_RULE_SETUP
#line 634 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return('('); }
	YY_BREAK
case 501:
YY_RULE_SETUP
#line 635 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(')'); }
	YY_BREAK
case 502:
YY_RULE_SETUP
#line 636 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return('-'); }
	YY_BREAK
case 503:
YY_RULE_SETUP
#line 637 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return('+'); }
	YY_BREAK
case 504:
YY_RULE_SETUP
#line 638 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return('*'); }
	YY_BREAK
case 505:
YY_RULE_SETUP
#line 639 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return('/'); }
	YY_BREAK
case 506:
YY_RULE_SETUP
#line 640 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return('%'); }
	YY_BREAK
case 507:
YY_RULE_SETUP
#line 641 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return('@'); }
	YY_BREAK
case 508:
YY_RULE_SETUP
#line 642 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(':'); }
	YY_BREAK
case 509:
YY_RULE_SETUP
#line 643 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return('>'); }
	YY_BREAK
case 510:
YY_RULE_SETUP
#line 644 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return('<'); }
	YY_BREAK
case 511:
YY_RULE_SETUP
#line 645 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(']'); }
	YY_BREAK
case 512:
YY_RULE_SETUP
#line 646 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return('['); }
	YY_BREAK
case 513:
YY_RULE_SETUP
#line 647 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(EQ);  }
	YY_BREAK
case 514:
YY_RULE_SETUP
#line 648 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(NEQ);  }
	YY_BREAK
case 515:
YY_RULE_SETUP
#line 649 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(GEQ);  }
	YY_BREAK
case 516:
YY_RULE_SETUP
#line 650 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(LEQ);  }
	YY_BREAK
case 517:
YY_RULE_SETUP
#line 651 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return('&');  }
	YY_BREAK
case 518:
YY_RULE_SETUP
#line 652 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return('|');  }
	YY_BREAK
case 519:
YY_RULE_SETUP
#line 653 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return('^');  }
	YY_BREAK
case 520:
YY_RULE_SETUP
#line 654 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return('~');  }
	YY_BREAK
case 521:
YY_RULE_SETUP
#line 655 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return('!');  }
	YY_BREAK
case 522:
YY_RULE_SETUP
#line 656 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(BOOLEAN_AND);	}
	YY_BREAK
case 523:
YY_RULE_SETUP
#line 657 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(BOOLEAN_OR);	}
	YY_BREAK
case 524:
YY_RULE_SETUP
#line 658 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(SHIFT_LEFT);  }
	YY_BREAK
case 525:
YY_RULE_SETUP
#line 659 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); return(SHIFT_RIGHT); }
	YY_BREAK
case 526:
YY_RULE_SETUP
#line 661 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ count(); }
	YY_BREAK
case 527:
YY_RULE_SETUP
#line 662 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
{ /* ignore bad characters */ }
	YY_BREAK
case 528:
YY_RULE_SETUP
#line 664 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"
ECHO;
	YY_BREAK
#line 5340 "/home/gareth/slbrowser/linden/indra/viewer-linux-i686/lscript/lscript_compile/indra.l.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 3625 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 3625 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 3624);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 664 "/home/gareth/slbrowser/linden/indra/lscript/lscript_compile/indra.l"


LLScriptAllocationManager	*gAllocationManager;
LLScriptScript				*gScriptp;

// Prototype for the yacc parser entry point
int yyparse(void);

int yyerror(const char *fmt, ...)
{
	gErrorToText.writeError(yyout, gLine, gColumn, LSERROR_SYNTAX_ERROR);
	return 0;
}

//#define EMERGENCY_DEBUG_PRINTOUTS
//#define EMIT_CIL_ASSEMBLER

BOOL lscript_compile(const char* src_filename, const char* dst_filename,
					 const char* err_filename, BOOL compile_to_mono, const char* class_name, BOOL is_god_like)
{
	BOOL			b_parse_ok = FALSE;
	BOOL			b_dummy = FALSE;
	U64				b_dummy_count = FALSE;
	LSCRIPTType		type = LST_NULL;

	gInternalColumn = 0;
	gInternalLine = 0;
	gScriptp = NULL;

	gErrorToText.init();
	init_supported_expressions();
	init_temp_jumps();
	gAllocationManager = new LLScriptAllocationManager();

	yyin = LLFile::fopen(std::string(src_filename), "r");
	if (yyin)
	{
		yyout = LLFile::fopen(std::string(err_filename), "w");

		// Reset the lexer's internal buffering.

	    yyrestart(yyin);

		b_parse_ok = !yyparse();

		if (b_parse_ok)
		{
#ifdef EMERGENCY_DEBUG_PRINTOUTS
			char compiled[256];
			sprintf(compiled, "%s.o", src_filename);
			LLFILE* compfile;
			compfile = LLFile::fopen(compiled, "w");
#endif

			if(dst_filename)
			{
				gScriptp->setBytecodeDest(dst_filename);
			}

			gScriptp->mGodLike = is_god_like;
			
			gScriptp->setClassName(class_name);

			gScopeStringTable = new LLStringTable(16384);
#ifdef EMERGENCY_DEBUG_PRINTOUTS
			gScriptp->recurse(compfile, 0, 4, LSCP_PRETTY_PRINT, LSPRUNE_INVALID, b_dummy, NULL, type, type, b_dummy_count, NULL, NULL, 0, NULL, 0, NULL);
#endif
			gScriptp->recurse(yyout, 0, 0, LSCP_PRUNE,		 LSPRUNE_INVALID, b_dummy, NULL, type, type, b_dummy_count, NULL, NULL, 0, NULL, 0, NULL);
			gScriptp->recurse(yyout, 0, 0, LSCP_SCOPE_PASS1, LSPRUNE_INVALID, b_dummy, NULL, type, type, b_dummy_count, NULL, NULL, 0, NULL, 0, NULL);
			gScriptp->recurse(yyout, 0, 0, LSCP_SCOPE_PASS2, LSPRUNE_INVALID, b_dummy, NULL, type, type, b_dummy_count, NULL, NULL, 0, NULL, 0, NULL);
			gScriptp->recurse(yyout, 0, 0, LSCP_TYPE,		 LSPRUNE_INVALID, b_dummy, NULL, type, type, b_dummy_count, NULL, NULL, 0, NULL, 0, NULL);
			if (!gErrorToText.getErrors())
			{
				gScriptp->recurse(yyout, 0, 0, LSCP_RESOURCE, LSPRUNE_INVALID,		 b_dummy, NULL, type, type, b_dummy_count, NULL, NULL, 0, NULL, 0, NULL);
#ifdef EMERGENCY_DEBUG_PRINTOUTS
				gScriptp->recurse(yyout, 0, 0, LSCP_EMIT_ASSEMBLY, LSPRUNE_INVALID,  b_dummy, NULL, type, type, b_dummy_count, NULL, NULL, 0, NULL, 0, NULL);
#endif
				if(TRUE == compile_to_mono)
				{
					gScriptp->recurse(yyout, 0, 0, LSCP_EMIT_CIL_ASSEMBLY, LSPRUNE_INVALID,  b_dummy, NULL, type, type, b_dummy_count, NULL, NULL, 0, NULL, 0, NULL);
				}
				else
				{
					gScriptp->recurse(yyout, 0, 0, LSCP_EMIT_BYTE_CODE, LSPRUNE_INVALID, b_dummy, NULL, type, type, b_dummy_count, NULL, NULL, 0, NULL, 0, NULL);
				}
			}
			delete gScopeStringTable;
			gScopeStringTable = NULL;
#ifdef EMERGENCY_DEBUG_PRINTOUTS
			fclose(compfile);
#endif
			fclose(yyout);
		}
		fclose(yyin);
	}

	delete gAllocationManager;
	delete gScopeStringTable;
	
	return b_parse_ok && !gErrorToText.getErrors();
}


BOOL lscript_compile(char *filename, BOOL compile_to_mono, BOOL is_god_like = FALSE)
{
	char src_filename[MAX_STRING];
	sprintf(src_filename, "%s.lsl", filename);
	char err_filename[MAX_STRING];
	sprintf(err_filename, "%s.out", filename);
	char class_name[MAX_STRING];
	sprintf(class_name, "%s", filename);
	return lscript_compile(src_filename, NULL, err_filename, compile_to_mono, class_name, is_god_like);
}


S32 yywrap()
{
#if defined(FLEX_SCANNER) && !defined(LL_WINDOWS)
	// get gcc to stop complaining about lack of use of yyunput
	(void) yyunput;
#endif
	return(1);
}

void comment()
{
	char c;

	while ((c = yyinput()) != '\n' && c != 0 && c != EOF)
		;
}

void count()
{
	S32 i;

	gColumn = gInternalColumn;
	gLine = gInternalLine;

	for (i = 0; yytext[i] != '\0'; i++)
		if (yytext[i] == '\n')
		{
			gInternalLine++;
			gInternalColumn = 0;
		}
		else if (yytext[i] == '\t')
			gInternalColumn += 4 - (gInternalColumn % 8);
		else
			gInternalColumn++;
}

void parse_string()
{
	S32 length = (S32)strlen(yytext);
	length = length - 2; 
	char *temp = yytext + 1;

	S32 i;
	S32 escapes = 0;
	S32 tabs = 0;
	for (i = 0; i < length; i++)
	{
		if (temp[i] == '\\')
		{
			escapes++;
			i++;
			if (temp[i] == 't')
				tabs++;
		}
	}

	S32 newlength = length - escapes + tabs*3;
	yylval.sval = new char[newlength + 1];

	char *dest = yylval.sval;

	for (i = 0; i < length; i++)
	{
		if (temp[i] == '\\')
		{
			i++;
			// linefeed
			if (temp[i] == 'n')
			{
				*dest++ = 10;
			}
			else if (temp[i] == 't')
			{
				*dest++ = ' ';
				*dest++ = ' ';
				*dest++ = ' ';
				*dest++ = ' ';
			}
			else
			{
				*dest++ = temp[i];
			}
		}
		else
		{
			*dest++ = temp[i];
		}
	}
	yylval.sval[newlength] = 0;
}
